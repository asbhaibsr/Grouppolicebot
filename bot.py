from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ChatPermissions, Message
from pyrogram.enums import ParseMode, ChatType, ChatMemberStatus # ChatMemberStatus is important
from datetime import datetime, timedelta
import asyncio
import time

from config import (
    BOT_TOKEN, API_ID, API_HASH, CASE_LOG_CHANNEL_ID,
    NEW_USER_GROUP_LOG_CHANNEL_ID, OWNER_ID, WELCOME_MESSAGE_DEFAULT,
    logger, UPDATE_CHANNEL_USERNAME, ASBHAI_USERNAME,
    COMMAND_COOLDOWN_TIME, # MESSAGE_REPLY_COOLDOWN_TIME hata diya gaya hai
    BOT_PHOTO_URL, REPO_LINK
)
from database import (
    add_or_update_group, get_group_settings, update_group_setting, add_violation,
    get_user_biolink_exception, set_user_biolink_exception, get_all_groups,
    get_total_users, get_total_violations, add_or_update_user, log_new_user_or_group
)
from filters import (
    is_abusive, is_pornographic_text, contains_links, is_spam, has_bio_link, contains_usernames
)

# Pyrogram Client Instance
app = Client(
    "GroupPoliceBot", # Session name
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# ‡§Ø‡§π ‡§è‡§ï ‡§Ö‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§°‡§ø‡§ï‡•ç‡§∂‡§®‡§∞‡•Ä ‡§π‡•à ‡§ú‡•ã ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§∏‡•ç‡§ü‡•á‡§ü ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§
user_data_awaiting_input = {}
user_cooldowns = {} # Cooldowns for commands per user
# chat_message_cooldowns = {} # Chatbot related cooldown hata diya gaya hai

# --- ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ---

async def is_user_admin_in_chat(client: Client, chat_id: int, user_id: int) -> bool:
    """‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§"""
    try:
        member = await client.get_chat_member(chat_id, user_id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.error(f"Error checking admin status for user {user_id} in chat {chat_id}: {e}")
        return False

async def send_case_log_to_channel(client: Client, violation_data: dict):
    """‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§® ‡§≤‡•â‡§ó ‡§ï‡•á‡§∏ ‡§≤‡•â‡§ó ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§"""
    log_message = (
        f"üö® **‡§®‡§Ø‡§æ ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§® ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡•á‡§°** üö®\n\n"
        f"**‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®‡§ï‡§∞‡•ç‡§§‡§æ:** [{violation_data['username']}](tg://user?id={violation_data['user_id']}) (ID: `{violation_data['user_id']}`)\n"
        f"**‡§ó‡•ç‡§∞‡•Å‡§™:** [{violation_data['group_name']}](https://t.me/c/{str(violation_data['group_id'])[4:]}) (ID: `{violation_data['group_id']}`)\n"
        f"**‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§® ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:** `{violation_data['violation_type']}`\n"
        f"**‡§∏‡§Æ‡§Ø:** `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`\n\n"
        f"--- **‡§≠‡•á‡§ú‡•Ä ‡§ó‡§à ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä** ---\n"
        f"`{violation_data['original_content']}`\n"
    )

    if violation_data.get('case_name'):
        log_message += f"\n**‡§ï‡•á‡§∏ ‡§®‡•á‡§Æ:** `{violation_data['case_name']}`"

    try:
        await client.send_message(
            chat_id=CASE_LOG_CHANNEL_ID,
            text=log_message,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error sending case log to channel: {e}")

async def send_new_entry_log_to_channel(client: Client, log_type: str, entity_id: int, entity_name: str, inviter_info=None, group_info=None):
    """‡§®‡§è ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡•Å‡§°‡§º‡§®‡•á ‡§ï‡•ã ‡§≤‡•â‡§ó ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§"""
    log_message = ""
    if log_type == "new_group":
        log_message = (
            f"‚ûï **‡§®‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ** ‚ûï\n\n"
            f"**‡§ó‡•ç‡§∞‡•Å‡§™ ‡§®‡§æ‡§Æ:** `{entity_name}`\n"
            f"**‡§ó‡•ç‡§∞‡•Å‡§™ ID:** `{entity_id}`\n"
        )
        if inviter_info:
            log_message += f"**‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ:** [{inviter_info['username']}](tg://user?id={inviter_info['id']}) (ID: `{inviter_info['id']}`)\n"
    elif log_type == "new_user":
        log_message = (
            f"üë• **‡§®‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•Å‡§Ü** üë•\n\n"
            f"**‡§Ø‡•Ç‡§ú‡§º‡§∞:** [{entity_name}](tg://user?id={entity_id}) (ID: `{entity_id}`)\n"
        )
        if group_info:
             log_message += f"**‡§ó‡•ç‡§∞‡•Å‡§™:** [{group_info['name']}](https://t.me/c/{str(group_info['id'])[4:]})\n"

    log_message += f"**‡§∏‡§Æ‡§Ø:** `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"

    try:
        await client.send_message(
            chat_id=NEW_USER_GROUP_LOG_CHANNEL_ID,
            text=log_message,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error sending new entry log to channel: {e}")

def check_cooldown(user_id, cooldown_type="command"):
    """‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•â‡§≤‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    now = time.time()
    if cooldown_type == "command":
        if user_id in user_cooldowns and (now - user_cooldowns[user_id]) < COMMAND_COOLDOWN_TIME:
            return False # Still on cooldown
        user_cooldowns[user_id] = now
    # elif cooldown_type == "message_reply": # Chatbot related cooldown hata diya gaya hai
        # if user_id in chat_message_cooldowns and (now - chat_message_cooldowns[user_id]) < MESSAGE_REPLY_COOLDOWN_TIME:
            # return False
        # chat_message_cooldowns[user_id] = now
    return True

# --- ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ---

@app.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    if not check_cooldown(message.from_user.id, "command"):
        return

    user = message.from_user
    add_or_update_user(user.id, user.username, user.first_name, user.last_name, user.is_bot)

    keyboard = [
        [InlineKeyboardButton("‚ûï ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{client.me.username}?startgroup=true")],
        [InlineKeyboardButton("‚ùì ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ", callback_data="help_menu")],
        [InlineKeyboardButton("üì¢ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}")],
        [InlineKeyboardButton("üîó ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•ã‡§°", url=REPO_LINK)],
        [InlineKeyboardButton("üìû ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{ASBHAI_USERNAME}")]
    ]

    is_connected_group_admin = False
    all_connected_groups = get_all_groups()
    for group_data in all_connected_groups:
        if await is_user_admin_in_chat(client, group_data["id"], user.id):
            is_connected_group_admin = True
            break

    if is_connected_group_admin:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏", callback_data="settings_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    start_message_text = (
        f"üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user.first_name}! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å, {client.me.first_name}.\n\n"
        "‡§Æ‡•à‡§Ç ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ö‡•à‡§ü ‡§ï‡•ã ‡§Æ‡•â‡§°‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á, ‡§∏‡•ç‡§™‡•à‡§Æ, ‡§Ö‡§®‡•Å‡§ö‡§ø‡§§ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§î‡§∞ ‡§Ö‡§µ‡§æ‡§Ç‡§õ‡§ø‡§§ ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•ã ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å‡•§\n"
        "‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?"
    )
    
    try:
        await message.reply_photo(
            photo=BOT_PHOTO_URL, # ‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã URL
            caption=start_message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Error sending start message with photo: {e}. Sending text only.")
        await message.reply_text(
            start_message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )


@app.on_message(filters.command("connectgroup") & filters.private)
async def connect_group_command(client: Client, message: Message):
    if not check_cooldown(message.from_user.id, "command"):
        return

    if not message.text or len(message.command) < 2:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/connectgroup -1234567890`")
        return

    try:
        group_id = int(message.command[1])
    except ValueError:
        await message.reply_text("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ó‡•ç‡§∞‡•Å‡§™ ID‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§")
        return

    try:
        chat_info = await client.get_chat(group_id)
        if chat_info.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
            await message.reply_text("‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§à ID ‡§è‡§ï ‡§µ‡•à‡§ß ‡§ó‡•ç‡§∞‡•Å‡§™ ID ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
            return
    except Exception as e:
        await message.reply_text(f"‡§ó‡•ç‡§∞‡•Å‡§™ ‡§¢‡•Ç‡§Ç‡§¢‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡•§ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§â‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§π‡•à ‡§î‡§∞ ID ‡§∏‡§π‡•Ä ‡§π‡•à‡•§ ‡§è‡§∞‡§∞: {e}")
        return

    if not await is_user_admin_in_chat(client, group_id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™ ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç, ‡§á‡§∏‡§≤‡§ø‡§è ‡§á‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§")
        return

    add_or_update_group(group_id, chat_info.title, message.from_user.id)
    await message.reply_text(f"‡§ó‡•ç‡§∞‡•Å‡§™ '{chat_info.title}' ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à! ‡§Ö‡§¨ ‡§Ü‡§™ ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§")
    
    await send_new_entry_log_to_channel(
        client, "new_group", chat_info.id, chat_info.title,
        {"id": message.from_user.id, "username": message.from_user.username or message.from_user.first_name}
    )


@app.on_message(filters.command("settings") & filters.private)
async def settings_menu_command(client: Client, message: Message):
    if not check_cooldown(message.from_user.id, "command"):
        return

    user = message.from_user
    connected_group = None
    all_groups = get_all_groups()
    for group_data in all_groups:
        if await is_user_admin_in_chat(client, group_data["id"], user.id):
            connected_group = group_data
            break

    if not connected_group:
        await message.reply_text(
            "‡§ï‡•ã‡§à ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ ‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§\n"
            "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§è‡§ï ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•ã `/connectgroup <groupid>` ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§"
        )
        return

    keyboard = await generate_settings_keyboard(connected_group["id"])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text(
        f"'{connected_group['name']}' ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

@app.on_callback_query()
async def button_callback_handler(client: Client, query):
    await query.answer()

    data = query.data
    parts = data.split('_')
    action = parts[0]

    if action == "toggle":
        setting_name = "_".join(parts[1:-1])
        group_id = int(parts[-1])
        
        if not await is_user_admin_in_chat(client, group_id, query.from_user.id):
            await query.message.edit_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
            return

        group_settings = get_group_settings(group_id)
        if group_settings:
            current_value = group_settings.get(setting_name)
            new_value = not current_value
            update_group_setting(group_id, setting_name, new_value)
            
            updated_keyboard = await generate_settings_keyboard(group_id)
            await query.message.edit_text(
                f"'{group_settings['name']}' ‡§ï‡•á ‡§≤‡§ø‡§è `{setting_name.replace('filter_', '').replace('_', ' ').replace('del_', ' ').capitalize()}` ‡§Ö‡§¨ {'ON' if new_value else 'OFF'} ‡§π‡•à‡•§\n"
                f"‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§°‡•§",
                reply_markup=InlineKeyboardMarkup(updated_keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text("‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§")

    elif action == "set_welcome_message":
        group_id = int(parts[-1])
        user_data_awaiting_input[query.from_user.id] = {"awaiting_welcome_message_input": group_id}
        await query.message.edit_text(
            "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§¨ ‡§®‡§Ø‡§æ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç‡•§ ‡§Ü‡§™ `{username}` ‡§î‡§∞ `{groupname}` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§\n"
            "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è `/cancel` ‡§≠‡•á‡§ú‡•á‡§Ç‡•§"
        )
    
    elif action == "take_action":
        user_id_to_act = int(parts[2])
        group_id = int(parts[3])
        if not await is_user_admin_in_chat(client, group_id, query.from_user.id):
            await query.message.edit_text("‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
            return
            
        action_keyboard = [
            [InlineKeyboardButton("üîá ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡•á‡§Ç (1 ‡§ò‡§Ç‡§ü‡§æ)", callback_data=f"mute_user_{user_id_to_act}_{group_id}_3600")],
            [InlineKeyboardButton("üë¢ ‡§ï‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç", callback_data=f"kick_user_{user_id_to_act}_{group_id}")],
            [InlineKeyboardButton("üö´ ‡§¨‡•à‡§® ‡§ï‡§∞‡•á‡§Ç", callback_data=f"ban_user_{user_id_to_act}_{group_id}")],
            [InlineKeyboardButton("‚ö†Ô∏è ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§Ç", callback_data=f"warn_user_{user_id_to_act}_{group_id}")],
            [InlineKeyboardButton("‚ùå ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç", callback_data=f"cancel_action_{user_id_to_act}_{group_id}")]
        ]
        await query.message.edit_text(
            f"[{user_id_to_act}](tg://user?id={user_id_to_act}) ‡§™‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à?",
            reply_markup=InlineKeyboardMarkup(action_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif action == "manage_permission": # ‡§¨‡§æ‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§Ö‡§™‡§µ‡§æ‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è
        user_id_to_manage = int(parts[2])
        group_id = int(parts[3])
        if not await is_user_admin_in_chat(client, group_id, query.from_user.id):
            await query.message.edit_text("‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
            return

        current_permission = get_user_biolink_exception(user_id_to_manage)
        permission_status_text = "‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à" if current_permission else "‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à"

        permission_keyboard = [
            [InlineKeyboardButton("‚úÖ ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç", callback_data=f"set_bio_permission_{user_id_to_manage}_true")],
            [InlineKeyboardButton("‚ùå ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§® ‡§¶‡•á‡§Ç", callback_data=f"set_bio_permission_{user_id_to_manage}_false")]
        ]
        await query.message.edit_text(
            f"[{user_id_to_manage}](tg://user?id={user_id_to_manage}) ‡§ï‡•ã ‡§¨‡§æ‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç: **{permission_status_text}**\n\n"
            f"‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§Ç?",
            reply_markup=InlineKeyboardMarkup(permission_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif action == "set_bio_permission":
        user_id = int(parts[2])
        permission_status = parts[3] == 'true'
        set_user_biolink_exception(user_id, permission_status)
        await query.message.edit_text(f"[{user_id}](tg://user?id={user_id}) ‡§ï‡•ã ‡§¨‡§æ‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø {'‡§Æ‡§ø‡§≤ ‡§ó‡§à ‡§π‡•à' if permission_status else '‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à'}‡•§", parse_mode=ParseMode.MARKDOWN)

    elif action in ["mute_user", "kick_user", "ban_user", "warn_user"]:
        user_id = int(parts[2])
        group_id = int(parts[3])
        if not await is_user_admin_in_chat(client, group_id, query.from_user.id):
            await query.message.edit_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
            return

        try:
            target_user_info = await client.get_users(user_id)
            target_username = target_user_info.username or target_user_info.first_name
            
            if action == "mute_user":
                duration = int(parts[4])
                await client.restrict_chat_member(
                    chat_id=group_id,
                    user_id=user_id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=datetime.now() + timedelta(seconds=duration)
                )
                await query.message.edit_text(f"@{target_username} ‡§ï‡•ã {duration/60} ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
            elif action == "kick_user":
                await client.ban_chat_member(chat_id=group_id, user_id=user_id)
                await client.unban_chat_member(chat_id=group_id, user_id=user_id) # ‡§ï‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡§¨‡•à‡§® ‡§≠‡•Ä ‡§ï‡§∞‡•á‡§Ç
                await query.message.edit_text(f"@{target_username} ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§ï‡§ø‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
            elif action == "ban_user":
                await client.ban_chat_member(chat_id=group_id, user_id=user_id)
                await query.message.edit_text(f"@{target_username} ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§¨‡•à‡§® ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
            elif action == "warn_user":
                # ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§≤‡•â‡§ú‡§ø‡§ï ‡§Ø‡§π‡§æ‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§ï‡§æ‡§â‡§Ç‡§ü ‡§¨‡§¢‡§º‡§æ‡§®‡§æ
                await query.message.edit_text(f"@{target_username} ‡§ï‡•ã ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§")
        except Exception as e:
            await query.message.edit_text(f"‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§è‡§∞‡§∞: {e}")
            logger.error(f"Action failed for user {user_id} in chat {group_id}: {e}")

    elif action == "close_settings":
        await query.message.edit_text("‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à‡§Ç‡•§")
    
    elif action == "help_menu":
        help_text = (
            "ü§ñ **‡§ó‡•ç‡§∞‡•Å‡§™ ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§¨‡•â‡§ü ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ** ü§ñ\n\n"
            "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•ã ‡§∏‡§æ‡§´ ‡§î‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§Ø‡§π‡§æ‡§Å ‡§ï‡•Å‡§õ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§î‡§∞ ‡§Æ‡•á‡§∞‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç ‡§π‡•à‡§Ç:\n\n"
            "**‡§®‡§ø‡§ú‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§° (‡§Æ‡•Å‡§ù‡•á PM ‡§ï‡§∞‡•á‡§Ç):**\n"
            "‚Ä¢ `/start`: ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
            "‚Ä¢ `/connectgroup <group_id>`: ‡§Ö‡§™‡§®‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•ã ‡§¨‡•â‡§ü ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§Ü‡§™‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è)‡•§\n"
            "‚Ä¢ `/settings`: ‡§Ö‡§™‡§®‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•â‡§°‡§∞‡•á‡§∂‡§® ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "‚Ä¢ `/broadcast <message>`: (‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§≤‡§ø‡§ï) ‡§∏‡§≠‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§\n"
            "‚Ä¢ `/stats`: (‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§≤‡§ø‡§ï) ‡§¨‡•â‡§ü ‡§ï‡•á ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§Ü‡§Ç‡§ï‡§°‡§º‡•á ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n\n"
            "**‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•â‡§°‡§∞‡•á‡§∂‡§® ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç:**\n"
            "‚Ä¢ **‡§ó‡§æ‡§≤‡•Ä-‡§ó‡§≤‡•å‡§ú ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞**: ‡§Ü‡§™‡§§‡•ç‡§§‡§ø‡§ú‡§®‡§ï ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡§æ ‡§π‡•à‡•§\n"
            "‚Ä¢ **‡§™‡•â‡§∞‡•ç‡§®‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞**: ‡§™‡•â‡§∞‡•ç‡§®‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡§æ ‡§π‡•à‡•§\n"
            "‚Ä¢ **‡§∏‡•ç‡§™‡•à‡§Æ ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞**: ‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§≤‡§Ç‡§¨‡•á ‡§Ø‡§æ ‡§¶‡•ã‡§π‡§∞‡§æ‡§è ‡§ó‡§è ‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡§æ ‡§π‡•à‡•§\n"
            "‚Ä¢ **‡§≤‡§ø‡§Ç‡§ï ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞**: ‡§Ö‡§µ‡§æ‡§Ç‡§õ‡§ø‡§§ ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡§æ ‡§π‡•à‡•§\n"
            "‚Ä¢ **‡§¨‡§æ‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞**: ‡§â‡§® ‡§Ø‡•Ç‡§ú‡§º‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡§æ ‡§π‡•à ‡§ú‡§ø‡§®‡§ï‡•á ‡§¨‡§æ‡§Ø‡•ã ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§Ç‡§ï ‡§π‡•à‡§Ç (‡§ú‡§ø‡§®‡•ç‡§π‡•á‡§Ç ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à)‡•§\n"
            "‚Ä¢ **‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞**: ‡§Ö‡§®‡•ç‡§Ø ‡§ö‡•à‡§®‡§≤/‡§¨‡•â‡§ü ‡§ï‡•á ‡§Ø‡•Ç‡§ú‡§∞‡§®‡•á‡§Æ ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡§æ ‡§π‡•à‡•§\n"
            "‚Ä¢ **‡§®‡§Ø‡§æ ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§µ‡•á‡§≤‡§ï‡§Æ**: ‡§®‡§è ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§ï‡§∏‡•ç‡§ü‡§Æ‡§æ‡§á‡§ú‡•á‡§¨‡§≤ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§\n"
            "‚Ä¢ **‡§ë‡§ü‡•ã-‡§∞‡§ø‡§Æ‡•Ç‡§µ ‡§¨‡•â‡§ü‡•ç‡§∏**: ‡§®‡§è ‡§ú‡•Å‡§°‡§º‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§¨‡•â‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡§ø‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§\n\n"
            "**‡§ó‡•ç‡§∞‡•Å‡§™ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è:**\n"
            "‡§Æ‡•â‡§°‡§∞‡•á‡§∂‡§® ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•Å‡§ù‡•á PM ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ `/settings` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è, [‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç](https://t.me/{ASBHAI_USERNAME})‡•§"
        )
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚öôÔ∏è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏", callback_data="settings_menu")],
            [InlineKeyboardButton("üîó ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•ã‡§°", url=REPO_LINK)],
            [InlineKeyboardButton("üì¢ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}")]
        ])
        await query.message.edit_text(help_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)


async def generate_settings_keyboard(group_id):
    """‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•Ä‡§¨‡•ã‡§∞‡•ç‡§° ‡§ï‡•ã ‡§°‡§æ‡§Ø‡§®‡§æ‡§Æ‡§ø‡§ï ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    group_settings = get_group_settings(group_id)
    if not group_settings:
        return []

    keyboard = [
        [InlineKeyboardButton(f"‡§¨‡•â‡§ü ‡§∏‡§ï‡•ç‡§∑‡§Æ: {'ON' if group_settings.get('bot_enabled') else 'OFF'}", callback_data=f"toggle_bot_enabled_{group_id}")],
        [InlineKeyboardButton(f"‡§ó‡§æ‡§≤‡•Ä-‡§ó‡§≤‡•å‡§ú ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞: {'ON' if group_settings.get('filter_abusive') else 'OFF'}", callback_data=f"toggle_filter_abusive_{group_id}")],
        [InlineKeyboardButton(f"‡§™‡•â‡§∞‡•ç‡§®‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü: {'ON' if group_settings.get('filter_pornographic_text') else 'OFF'}", callback_data=f"toggle_filter_pornographic_text_{group_id}")],
        [InlineKeyboardButton(f"‡§∏‡•ç‡§™‡•à‡§Æ ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞: {'ON' if group_settings.get('filter_spam') else 'OFF'}", callback_data=f"toggle_filter_spam_{group_id}")],
        [InlineKeyboardButton(f"‡§≤‡§ø‡§Ç‡§ï ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞: {'ON' if group_settings.get('filter_links') else 'OFF'}", callback_data=f"toggle_filter_links_{group_id}")],
        [InlineKeyboardButton(f"‡§¨‡§æ‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞: {'ON' if group_settings.get('filter_bio_links') else 'OFF'}", callback_data=f"toggle_filter_bio_links_{group_id}")],
        [InlineKeyboardButton(f"‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞: {'ON' if group_settings.get('usernamedel_enabled') else 'OFF'}", callback_data=f"toggle_usernamedel_enabled_{group_id}")],
        [InlineKeyboardButton("‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç", callback_data=f"set_welcome_message_{group_id}")],
        [InlineKeyboardButton("‚úÖ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç", callback_data="close_settings")]
    ]
    return keyboard

@app.on_message(filters.text & filters.private & (lambda _, __, msg: not msg.text.startswith('/') and not msg.text.startswith('!')) & filters.user(lambda _, __, msg: msg.from_user.id in user_data_awaiting_input and 'awaiting_welcome_message_input' in user_data_awaiting_input[msg.from_user.id]))
async def handle_welcome_message_input(client: Client, message: Message):
    if message.from_user.id in user_data_awaiting_input and 'awaiting_welcome_message_input' in user_data_awaiting_input[message.from_user.id]:
        group_id = user_data_awaiting_input[message.from_user.id].pop('awaiting_welcome_message_input')
        new_welcome_message = message.text
        update_group_setting(group_id, 'welcome_message', new_welcome_message)
        await message.reply_text(f"‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
        
        group_settings = get_group_settings(group_id)
        if group_settings:
            keyboard = await generate_settings_keyboard(group_id)
            await message.reply_text(
                f"'{group_settings['name']}' ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
    elif message.text == "/cancel":
        if message.from_user.id in user_data_awaiting_input and 'awaiting_welcome_message_input' in user_data_awaiting_input[message.from_user.id]:
            user_data_awaiting_input[message.from_user.id].pop('awaiting_welcome_message_input')
            await message.reply_text("‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")

# --- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•à‡§∏‡•á‡§ú ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ (‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç) ---
@app.on_message(filters.text & filters.group & ~filters.edited)
async def handle_group_message(client: Client, message: Message):
    chat = message.chat
    user = message.from_user
    
    # ‡§Ö‡§™‡§®‡•á ‡§ñ‡•Å‡§¶ ‡§ï‡•á ‡§¨‡•â‡§ü ‡§Ø‡§æ ‡§Ö‡§®‡•ç‡§Ø ‡§¨‡•â‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•ã ‡§á‡§ó‡•ç‡§®‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç
    if user.is_bot:
        return

    add_or_update_user(user.id, user.username, user.first_name, user.last_name, user.is_bot)

    group_settings = get_group_settings(chat.id)
    if not group_settings or not group_settings.get('bot_enabled', True):
        return # ‡§Ø‡§¶‡§ø ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ ‡§¨‡•â‡§ü ‡§Ö‡§ï‡•ç‡§∑‡§Æ ‡§π‡•à, ‡§§‡•ã ‡§ï‡•Å‡§õ ‡§® ‡§ï‡§∞‡•á‡§Ç

    violation_detected = False
    violation_type = None
    original_content = message.text
    case_name = None

    # 1. ‡§ó‡§æ‡§≤‡•Ä-‡§ó‡§≤‡•å‡§ú ‡§î‡§∞ ‡§™‡•â‡§∞‡•ç‡§®‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü
    if group_settings.get('filter_abusive') and is_abusive(message.text):
        violation_detected = True
        violation_type = "‡§ó‡§æ‡§≤‡•Ä-‡§ó‡§≤‡•å‡§ú"
        case_name = "‡§Ü‡§™‡§§‡•ç‡§§‡§ø‡§ú‡§®‡§ï ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó"
    elif group_settings.get('filter_pornographic_text') and is_pornographic_text(message.text):
        violation_detected = True
        violation_type = "‡§™‡•â‡§∞‡•ç‡§®‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü"
        case_name = "‡§™‡•â‡§∞‡•ç‡§®‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä"
    # 2. ‡§∏‡•ç‡§™‡•à‡§Æ‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§≤‡§ø‡§Ç‡§ï
    elif group_settings.get('filter_spam') and is_spam(message.text):
        violation_detected = True
        violation_type = "‡§∏‡•ç‡§™‡•à‡§Æ"
        case_name = "‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§∏‡•ç‡§™‡•à‡§Æ"
    elif group_settings.get('filter_links') and contains_links(message.text):
        violation_detected = True
        violation_type = "‡§≤‡§ø‡§Ç‡§ï"
        case_name = "‡§Ö‡§®‡§ß‡§ø‡§ï‡•É‡§§ ‡§≤‡§ø‡§Ç‡§ï"
    # 3. ‡§¨‡§æ‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§µ‡§æ‡§≤‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú
    elif group_settings.get('filter_bio_links'):
        has_bio = await has_bio_link(client, user.id)
        if has_bio:
            if not get_user_biolink_exception(user.id): # ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
                violation_detected = True
                violation_type = "‡§¨‡§æ‡§Ø‡•ã_‡§≤‡§ø‡§Ç‡§ï_‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®"
                case_name = "‡§¨‡§æ‡§Ø‡•ã ‡§Æ‡•á‡§Ç ‡§Ö‡§®‡§ß‡§ø‡§ï‡•É‡§§ ‡§≤‡§ø‡§Ç‡§ï"
    # 4. ‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞
    elif group_settings.get('usernamedel_enabled') and contains_usernames(message.text):
        violation_detected = True
        violation_type = "‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ"
        case_name = "‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ ‡§™‡•ç‡§∞‡§ö‡§æ‡§∞"


    # --- ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§® ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ---
    if violation_detected:
        try:
            await message.delete()

            log_data = {
                'username': user.username or user.first_name,
                'user_id': user.id,
                'group_name': chat.title,
                'group_id': chat.id,
                'violation_type': violation_type,
                'original_content': original_content,
                'case_name': case_name
            }
            add_violation(**log_data)
            await send_case_log_to_channel(client, log_data)

            warning_text = (
                f"‚ö†Ô∏è **‡§Ü‡§™‡§§‡•ç‡§§‡§ø‡§ú‡§®‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ** ‚ö†Ô∏è\n\n"
                f"[{user.first_name}](tg://user?id={user.id}) ‡§®‡•á ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§\n"
                f"‡§Ø‡§π ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§"
            )

            keyboard = []
            if violation_type == "‡§¨‡§æ‡§Ø‡•ã_‡§≤‡§ø‡§Ç‡§ï_‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®":
                 keyboard = [
                    [InlineKeyboardButton("üë§ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§¶‡•á‡§ñ‡•á‡§Ç", url=f"tg://user?id={user.id}")],
                    [InlineKeyboardButton("‚öôÔ∏è ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç", callback_data=f"manage_permission_{user.id}_{chat.id}")],
                    [InlineKeyboardButton("üìã ‡§ï‡•á‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç", url=f"https://t.me/c/{str(CASE_LOG_CHANNEL_ID)[4:]}")]
                ]
            else: # ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®
                keyboard = [
                    [InlineKeyboardButton("üë§ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§¶‡•á‡§ñ‡•á‡§Ç", url=f"tg://user?id={user.id}")],
                    [InlineKeyboardButton("üî® ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç", callback_data=f"take_action_{user.id}_{chat.id}")],
                    [InlineKeyboardButton("üìã ‡§ï‡•á‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç", url=f"https://t.me/c/{str(CASE_LOG_CHANNEL_ID)[4:]}")]
                ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            await client.send_message(
                chat_id=chat.id,
                text=warning_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        except Exception as e:
            logger.error(f"Error handling violation for {user.id} in {chat.id}: {e}")


# --- ‡§®‡§è ‡§Æ‡•á‡§Ç‡§¨‡§∞/‡§ó‡•ç‡§∞‡•Å‡§™ ‡§á‡§µ‡•á‡§Ç‡§ü‡•ç‡§∏ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ---
@app.on_message(filters.new_chat_members | filters.left_chat_member & filters.group)
async def handle_new_chat_members(client: Client, message: Message):
    group_settings = get_group_settings(message.chat.id)
    if not group_settings or not group_settings.get('bot_enabled', True):
        return # ‡§Ø‡§¶‡§ø ‡§¨‡•â‡§ü ‡§Ö‡§ï‡•ç‡§∑‡§Æ ‡§π‡•à, ‡§§‡•ã ‡§®‡§è ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§™‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§® ‡§ï‡§∞‡•á‡§Ç

    # ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ñ‡•Å‡§¶ ‡§ú‡•ã‡§°‡§º‡•á ‡§ú‡§æ‡§®‡•á ‡§™‡§∞ ‡§≤‡•â‡§ó
    if message.new_chat_members and client.me.id in [member.id for member in message.new_chat_members]:
        inviter_info = None
        if message.from_user: # ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞
            inviter_info = {"id": message.from_user.id, "username": message.from_user.username or message.from_user.first_name}
        
        add_or_update_group(message.chat.id, message.chat.title, inviter_info['id'] if inviter_info else None)
        await log_new_user_or_group(
            "new_group", message.chat.id, message.chat.title, inviter_info['id'] if inviter_info else None, inviter_info['username'] if inviter_info else None
        )
        await send_new_entry_log_to_channel(
            client, "new_group", message.chat.id, message.chat.title, inviter_info
        )
        

    # ‡§®‡§è ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ú‡•Å‡§°‡§º‡§®‡•á ‡§™‡§∞ ‡§≤‡•â‡§ó ‡§î‡§∞ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú
    if message.new_chat_members:
        for member in message.new_chat_members:
            if member.is_bot and member.id != client.me.id:
                # ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§¨‡•â‡§ü ‡§ú‡•Å‡§°‡§º‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§ï‡§ø‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç (‡§Ø‡§¶‡§ø ‡§¨‡•â‡§ü ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§™‡§∞‡§Æ‡§ø‡§∂‡§® ‡§π‡•à)
                try:
                    await client.kick_chat_member(message.chat.id, member.id)
                    await client.send_message(
                        message.chat.id,
                        f"ü§ñ ‡§®‡§Ø‡§æ ‡§¨‡•â‡§ü [{member.first_name}](tg://user?id={member.id}) ‡§™‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§î‡§∞ ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§"
                    )
                except Exception as e:
                    logger.error(f"Error kicking bot {member.id}: {e}")
            elif not member.is_bot: # ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§Ø‡•Ç‡§ú‡§º‡§∞
                add_or_update_user(member.id, member.username, member.first_name, member.last_name, False)
                await log_new_user_or_group(
                    "new_user", member.id, member.first_name, None, None # ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§á‡§®‡§µ‡§æ‡§á‡§ü‡§∞ ‡§®‡§π‡•Ä‡§Ç
                )
                await send_new_entry_log_to_channel(
                    client, "new_user", member.id, member.first_name, None,
                    {"id": message.chat.id, "name": message.chat.title}
                )
                # ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú
                welcome_msg = group_settings.get('welcome_message') or WELCOME_MESSAGE_DEFAULT
                welcome_msg = welcome_msg.format(username=member.first_name, groupname=message.chat.title)
                try:
                    await client.send_message(message.chat.id, welcome_msg)
                except Exception as e:
                    logger.error(f"Error sending welcome message in {message.chat.id}: {e}")

    # ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§ï‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§õ‡•ã‡§°‡§º‡§®‡•á ‡§™‡§∞ ‡§≤‡•â‡§ó (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
    if message.left_chat_member:
        member = message.left_chat_member
        if not member.is_bot and member.id != client.me.id: # ‡§Ö‡§™‡§®‡•á ‡§¨‡•â‡§ü ‡§ï‡•á ‡§õ‡•ã‡§°‡§º‡§®‡•á ‡§™‡§∞ ‡§≤‡•â‡§ó ‡§® ‡§ï‡§∞‡•á‡§Ç
            await log_new_user_or_group(
                "left_user", member.id, member.first_name, None, None
            )


# --- ‡§¨‡•â‡§ü ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ---
@app.on_message(filters.command("broadcast") & filters.user(OWNER_ID) & filters.private)
async def broadcast_command(client: Client, message: Message):
    if not check_cooldown(message.from_user.id, "command"):
        return

    if not message.text or len(message.command) < 2:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§")
        return
    
    message_to_broadcast = message.text.split(None, 1)[1] 
    all_groups = get_all_groups()

    sent_count = 0
    for group in all_groups:
        try:
            # ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§â‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
            chat_member = await client.get_chat_member(group["id"], client.me.id)
            if chat_member.status != ChatMemberStatus.LEFT:
                await client.send_message(chat_id=group["id"], text=message_to_broadcast)
                sent_count += 1
                await asyncio.sleep(0.1) # Flood control
        except Exception as e:
            logger.error(f"Error broadcasting to group {group['id']}: {e}")
    
    await message.reply_text(f"‡§∏‡§Ç‡§¶‡•á‡§∂ {sent_count} ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ‡•§")

@app.on_message(filters.command("stats") & filters.user(OWNER_ID) & filters.private)
async def stats_command(client: Client, message: Message):
    if not check_cooldown(message.from_user.id, "command"):
        return

    group_count = len(get_all_groups())
    user_count = get_total_users()
    violation_count = get_total_violations()

    stats_message = (
        f"üìä **‡§¨‡•â‡§ü ‡§Ü‡§Ç‡§ï‡§°‡§º‡•á** üìä\n\n"
        f"**‡§ú‡•Å‡§°‡§º‡•á ‡§π‡•Å‡§è ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏:** `{group_count}`\n"
        f"**‡§ï‡•Å‡§≤ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§ø‡§è ‡§ó‡§è ‡§Ø‡•Ç‡§ú‡§º‡§∞‡•ç‡§∏:** `{user_count}`\n"
        f"**‡§ï‡•Å‡§≤ ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®:** `{violation_count}`\n\n"
        f"‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•ã‡§°: [GitHub]({REPO_LINK})\n"
        f"‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤: @{UPDATE_CHANNEL_USERNAME}\n"
        f"‡§Æ‡§æ‡§≤‡§ø‡§ï: @{ASBHAI_USERNAME}"
    )
    await message.reply_text(stats_message, parse_mode=ParseMode.MARKDOWN)

# --- Bot start up (main function) ---
async def main():
    logger.info("Starting GroupPoliceBot...")
    await app.start()
    logger.info("GroupPoliceBot started successfully!")

if __name__ == "__main__":
    pass # We will start the bot from server.py now
