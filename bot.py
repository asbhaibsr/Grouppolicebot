from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions, Message
from pyrogram.errors import FloodWait, PeerIdInvalid, UserNotParticipant, ChatAdminRequired, BadRequest
from pyrogram.enums import ChatType, ParseMode

from datetime import datetime
import asyncio
import time

from config import (
    BOT_TOKEN, API_ID, API_HASH, OWNER_ID, CASE_LOG_CHANNEL_ID,
    NEW_USER_GROUP_LOG_CHANNEL_ID, UPDATE_CHANNEL_USERNAME, ASBHAI_USERNAME,
    BOT_PHOTO_URL, REPO_LINK, COMMAND_COOLDOWN_TIME, logger
)
from database import (
    add_or_update_group, get_group_settings, update_group_setting,
    add_or_update_user, add_violation, get_total_users, get_total_violations,
    get_all_groups, log_new_user_or_group, set_user_biolink_exception,
    get_user_biolink_exception, add_keywords, remove_keywords, get_all_keyword_lists
)
from filters import (
    is_abusive, is_pornographic_text, contains_links, is_spam,
    has_bio_link, contains_usernames
)

# Initialize Pyrogram Client
app = Client(
    "group_police_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# --- Cooldowns for commands ---
user_last_command_time = {}

async def is_on_cooldown(user_id: int) -> bool:
    """Checks if a user is on cooldown for commands."""
    last_time = user_last_command_time.get(user_id)
    if last_time and (time.time() - last_time < COMMAND_COOLDOWN_TIME):
        return True
    user_last_command_time[user_id] = time.time()
    return False

# --- Helper Function for Admin Check ---
async def is_user_admin_in_chat(chat_id: int, user_id: int) -> bool:
    """Checks if a user is an admin in a specific chat."""
    try:
        member = await app.get_chat_member(chat_id, user_id)
        return member.status in [enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER]
    except Exception as e:
        logger.error(f"Error checking admin status for user {user_id} in chat {chat_id}: {e}")
        return False

# --- Startup Message ---
@app.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "N/A"
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    is_bot_user = message.from_user.is_bot

    await add_or_update_user(user_id, username, first_name, last_name, is_bot_user)

    if await is_on_cooldown(user_id):
        await message.reply_text(f"рдереЛрдбрд╝рд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░реЗрдВ! рдпрд╣ рдХрдорд╛рдВрдб {COMMAND_COOLDOWN_TIME} рд╕реЗрдХрдВрдб рдХреЗ рдХреВрд▓рдбрд╛рдЙрди рдкрд░ рд╣реИред")
        return

    welcome_text = (
        f"ЁЯСЛ рдирдорд╕реНрддреЗ {message.from_user.mention}! рдореИрдВ {client.me.mention} рд╣реВрдБ, рдЖрдкрдХрд╛ рдЧреНрд░реБрдк рдкреБрд▓рд┐рд╕ рдмреЙрдЯред\n\n"
        "рдореИрдВ рдЧреНрд░реБрдк рдХреЛ рдЧрд╛рд▓рд┐рдпреЛрдВ, рдкреЛрд░реНрдиреЛрдЧреНрд░рд╛рдлрд┐рдХ рдЯреЗрдХреНрд╕реНрдЯ, рд╕реНрдкреИрдо, рд▓рд┐рдВрдХреНрд╕ рдФрд░ рдЕрд╡рд╛рдВрдЫрд┐рдд рдпреВрдЬрд░рдиреЗрдо рд╕реЗ рд╕реБрд░рдХреНрд╖рд┐рдд рд░рдЦрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реВрдБред\n\n"
        "рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдореЗрдВ рдореБрдЭреЗ рдЬреЛрдбрд╝рдХрд░ рдФрд░ рдПрдбрдорд┐рди рдЕрдиреБрдорддрд┐рдпрд╛рдБ рджреЗрдХрд░ рдЖрдк рдЗрд╕рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
    )

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("тЮХ рдореБрдЭреЗ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ", url=f"https://t.me/{client.me.username}?startgroup=true"),
                InlineKeyboardButton("ЁЯМР рдЕрдкрдбреЗрдЯ рдЪреИрдирд▓", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}")
            ],
            [
                InlineKeyboardButton("тЭУ рд╕рд╣рд╛рдпрддрд╛", callback_data="help_menu"), # рдЗрд╕ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рдкрд░ рд╣реЗрд▓реНрдк рдореЗрдиреВ рдЦреБрд▓реЗрдЧрд╛
                InlineKeyboardButton("ЁЯУЮ рдореБрдЭрд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ", url=f"https://t.me/{ASBHAI_USERNAME}")
            ],
            [
                InlineKeyboardButton("ЁЯУК рдмреЙрдЯ рдХреЗ рдЖрдБрдХрдбрд╝реЗ", callback_data="bot_stats"),
                InlineKeyboardButton("тЪЩя╕П рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕", callback_data="group_settings")
            ]
        ]
    )
    await message.reply_photo(
        photo=BOT_PHOTO_URL,
        caption=welcome_text,
        reply_markup=keyboard
    )

# --- Callback Query Handler ---
@app.on_callback_query()
async def button_callback_handler(client: Client, query):
    user_id = query.from_user.id
    action = query.data

    if await is_on_cooldown(user_id):
        await query.answer(f"рдереЛрдбрд╝рд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░реЗрдВ! рдпрд╣ рдХрдорд╛рдВрдб {COMMAND_COOLDOWN_TIME} рд╕реЗрдХрдВрдб рдХреЗ рдХреВрд▓рдбрд╛рдЙрди рдкрд░ рд╣реИред", show_alert=True)
        return

    if action == "help_menu":
        help_text = (
            "**ЁЯСЛ рдмреЙрдЯ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ рдФрд░ рдХреНрдпрд╛ рдХрдорд╛рдВрдбреНрд╕ рд╣реИрдВ?**\n\n"
            "рдореИрдВ рдЖрдкрдХреЗ рдЧреНрд░реБрдк рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рдФрд░ рд╕реНрд╡рдЪреНрдЫ рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реВрдБред рдореИрдВ рдЧрд╛рд▓рд┐рдпреЛрдВ, рд╕реНрдкреИрдо, рд▓рд┐рдВрдХреНрд╕, рдФрд░ рдЖрдкрддреНрддрд┐рдЬрдирдХ рдЯреЗрдХреНрд╕реНрдЯ рдХреЛ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред\n\n"
            "**рдЧреНрд░реБрдк рдореЗрдВ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХреИрд╕реЗ рдХрд░реЗрдВ:**\n"
            "1. **рдореБрдЭреЗ рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝реЗрдВред**\n"
            "2. **рдореБрдЭреЗ рдЧреНрд░реБрдк рдХрд╛ рдкреВрд░реНрдг рдПрдбрдорд┐рди рдмрдирд╛рдПрдВ** (рд╡рд┐рд╢реЗрд╖рдХрд░ рд╕рдВрджреЗрд╢ рд╣рдЯрд╛рдиреЗ, рд╕рджрд╕реНрдпреЛрдВ рдХреЛ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВ)ред\n"
            "3. рдореИрдВ рдЧреНрд░реБрдк рдореЗрдВ рдЖрддреЗ рд╣реА рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдХреЗ рд╕рд╛рде рдХрд╛рдо рдХрд░рдирд╛ рд╢реБрд░реВ рдХрд░ рджреВрдВрдЧрд╛ред рдЖрдк `/settings` рдХрдорд╛рдВрдб (рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред\n\n"
            "**рдХреБрдЫ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдХрдорд╛рдВрдбреНрд╕:**\n"
            " `/start` - рдмреЙрдЯ рдХреЛ рд╢реБрд░реВ рдХрд░реЗрдВ (рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ)\n"
            " `/settings` - рдЧреНрд░реБрдк рдХреА рдореЙрдбрд░реЗрд╢рди рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдмрджрд▓реЗрдВ (рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ)\n"
            " `/stats` - рдмреЙрдЯ рдХреЗ рдЙрдкрдпреЛрдЧ рдХреЗ рдЖрдБрдХрдбрд╝реЗ рджреЗрдЦреЗрдВ (рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ)\n"
            " `/connectgroup <Group ID>` - рдмреЙрдЯ рдХреЛ рдХрд┐рд╕реА рдЧреНрд░реБрдк рд╕реЗ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░реЗрдВ (рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ)\n\n"
            "**рдиреЛрдЯ:** рдпреЗ рд╕рднреА рдХрдорд╛рдВрдб рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ рдореЗрд░реЗ рд╕рд╛рде рдХрд╛рдо рдХрд░реЗрдВрдЧреАред рдЧреНрд░реБрдк рдХреЗ рднреАрддрд░, рдореИрдВ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░реВрдБрдЧрд╛ рдФрд░ рдЖрдк рдореЗрд░реЗ рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдХрд╛рд░реНрдпрд╡рд╛рд╣рд┐рдпрд╛рдБ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
        )
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data="start_menu")]
            ]
        )
        try:
            await query.message.edit_text(help_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        except BadRequest as e:
            logger.error(f"Error editing help message: {e}")
            await query.answer("рд╕рд╣рд╛рдпрддрд╛ рд╕рдВрджреЗрд╢ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред", show_alert=True)

    elif action == "start_menu":
        welcome_text = (
            f"ЁЯСЛ рдирдорд╕реНрддреЗ {query.from_user.mention}! рдореИрдВ {client.me.mention} рд╣реВрдБ, рдЖрдкрдХрд╛ рдЧреНрд░реБрдк рдкреБрд▓рд┐рд╕ рдмреЙрдЯред\n\n"
            "рдореИрдВ рдЧреНрд░реБрдк рдХреЛ рдЧрд╛рд▓рд┐рдпреЛрдВ, рдкреЛрд░реНрдиреЛрдЧреНрд░рд╛рдлрд┐рдХ рдЯреЗрдХреНрд╕реНрдЯ, рд╕реНрдкреИрдо, рд▓рд┐рдВрдХреНрд╕ рдФрд░ рдЕрд╡рд╛рдВрдЫрд┐рдд рдпреВрдЬрд░рдиреЗрдо рд╕реЗ рд╕реБрд░рдХреНрд╖рд┐рдд рд░рдЦрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реВрдБред\n\n"
            "рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдореЗрдВ рдореБрдЭреЗ рдЬреЛрдбрд╝рдХрд░ рдФрд░ рдПрдбрдорд┐рди рдЕрдиреБрдорддрд┐рдпрд╛рдБ рджреЗрдХрд░ рдЖрдк рдЗрд╕рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
        )
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("тЮХ рдореБрдЭреЗ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ", url=f"https://t.me/{client.me.username}?startgroup=true"),
                    InlineKeyboardButton("ЁЯМР рдЕрдкрдбреЗрдЯ рдЪреИрдирд▓", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}")
                ],
                [
                    InlineKeyboardButton("тЭУ рд╕рд╣рд╛рдпрддрд╛", callback_data="help_menu"),
                    InlineKeyboardButton("ЁЯУЮ рдореБрдЭрд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ", url=f"https://t.me/{ASBHAI_USERNAME}")
                ],
                [
                    InlineKeyboardButton("ЁЯУК рдмреЙрдЯ рдХреЗ рдЖрдБрдХрдбрд╝реЗ", callback_data="bot_stats"),
                    InlineKeyboardButton("тЪЩя╕П рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕", callback_data="group_settings")
                ]
            ]
        )
        try:
            await query.message.edit_text(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        except BadRequest as e:
            logger.error(f"Error editing start menu message: {e}")
            await query.answer("рд╕реНрдЯрд╛рд░реНрдЯ рдореЗрдиреВ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред", show_alert=True)

    elif action == "bot_stats":
        total_users = get_total_users()
        total_violations = get_total_violations()
        total_groups = len(get_all_groups()) # Adjusted to count from database

        stats_text = (
            "ЁЯУК **рдмреЙрдЯ рдХреЗ рдЖрдБрдХрдбрд╝реЗ:**\n"
            f"ЁЯСе рдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: `{total_users}`\n"
            f"ЁЯЪл рдХреБрд▓ рдЙрд▓реНрд▓рдВрдШрди: `{total_violations}`\n"
            f"ЁЯПШя╕П рдХреБрд▓ рдЬреБрдбрд╝реЗ рд╣реБрдП рдЧреНрд░реБрдк: `{total_groups}`\n\n"
            f"рдорд╛рд▓рд┐рдХ: @{ASBHAI_USERNAME}\n"
            f"рд╕реНрд░реЛрдд рдХреЛрдб: [GitHub]({REPO_LINK})"
        )
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data="start_menu")]
            ]
        )
        try:
            await query.message.edit_text(stats_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        except BadRequest as e:
            logger.error(f"Error editing stats message: {e}")
            await query.answer("рдЖрдБрдХрдбрд╝реЗ рд╕рдВрджреЗрд╢ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред", show_alert=True)

    elif action == "group_settings":
        # Check if the user is in a private chat and is an owner
        if query.message.chat.type == ChatType.PRIVATE:
            if user_id == OWNER_ID:
                all_groups = get_all_groups()
                if not all_groups:
                    await query.answer("рдХреЛрдИ рдЧреНрд░реБрдк рдХрдиреЗрдХреНрдЯ рдирд╣реАрдВ рд╣реИред рдкрд╣рд▓реЗ рдПрдХ рдЧреНрд░реБрдк рдЬреЛрдбрд╝реЗрдВред", show_alert=True)
                    return

                # Create buttons for each group
                group_buttons = []
                for group in all_groups:
                    group_buttons.append([InlineKeyboardButton(group['name'], callback_data=f"show_group_settings_{group['id']}")])
                
                group_buttons.append([InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data="start_menu")])
                
                keyboard = InlineKeyboardMarkup(group_buttons)
                await query.message.edit_text("рдХреГрдкрдпрд╛ рдЙрд╕ рдЧреНрд░реБрдк рдХрд╛ рдЪрдпрди рдХрд░реЗрдВ рдЬрд┐рд╕рдХреА рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдЖрдк рдмрджрд▓рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ:", reply_markup=keyboard)
            else:
                await query.answer("рдЖрдкрдХреЛ рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред", show_alert=True)
        else:
            await query.answer("рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ рдХрд╛рдо рдХрд░рддреА рд╣реИред", show_alert=True)

    elif action.startswith("show_group_settings_"):
        group_id = int(action.split("_")[3])
        settings = get_group_settings(group_id)
        
        if not settings:
            await query.answer("рдЧреНрд░реБрдк рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдирд╣реАрдВ рдорд┐рд▓реАрдВред", show_alert=True)
            return

        settings_text = f"тЪЩя╕П **{settings['name']} рдХреА рд╕реЗрдЯрд┐рдВрдЧреНрд╕:**\n\n"
        buttons = []

        # Bot Enabled
        bot_status = "тЬЕ рд╕рдХреНрд╖рдо" if settings.get('bot_enabled', True) else "тЭМ рдЕрдХреНрд╖рдо"
        buttons.append([InlineKeyboardButton(f"рдмреЙрдЯ: {bot_status}", callback_data=f"toggle_setting_{group_id}_bot_enabled")])

        # Filters
        filters_map = {
            "filter_abusive": "рдЧрд╛рд▓рд┐рдпрд╛рдБ",
            "filter_pornographic_text": "рдЖрдкрддреНрддрд┐рдЬрдирдХ рдЯреЗрдХреНрд╕реНрдЯ",
            "filter_spam": "рд╕реНрдкреИрдо",
            "filter_links": "рд▓рд┐рдВрдХреНрд╕",
            "filter_bio_links": "рдмрд╛рдпреЛ рд▓рд┐рдВрдХреНрд╕",
            "usernamedel_enabled": "рдпреВрдЬрд░рдиреЗрдо рдлрд┐рд▓реНрдЯрд░"
        }

        for setting_key, display_name in filters_map.items():
            status = "тЬЕ рд╕рдХреНрд╖рдо" if settings.get(setting_key, True) else "тЭМ рдЕрдХреНрд╖рдо"
            buttons.append([InlineKeyboardButton(f"{display_name}: {status}", callback_data=f"toggle_setting_{group_id}_{setting_key}")])

        # Welcome Message
        buttons.append([InlineKeyboardButton("рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ рдмрджрд▓реЗрдВ", callback_data=f"edit_welcome_message_{group_id}")])
        
        buttons.append([InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data="group_settings")]) # Back to group list

        keyboard = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(settings_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

    elif action.startswith("toggle_setting_"):
        parts = action.split("_")
        group_id = int(parts[2])
        setting_name = parts[3]
        
        settings = get_group_settings(group_id)
        current_value = settings.get(setting_name)
        new_value = not current_value # Toggle boolean

        update_group_setting(group_id, setting_name, new_value)
        await query.answer(f"{setting_name} рдХреЛ {'рд╕рдХреНрд╖рдо' if new_value else 'рдЕрдХреНрд╖рдо'} рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред", show_alert=True)
        
        # Re-display settings to reflect change
        await query.message.edit_text(
            f"тЪЩя╕П **{settings['name']} рдХреА рд╕реЗрдЯрд┐рдВрдЧреНрд╕:**\n\n",
            reply_markup=await get_group_settings_keyboard(group_id) # Helper to rebuild keyboard
        )

    elif action.startswith("edit_welcome_message_"):
        group_id = int(action.split("_")[3])
        await query.answer("рдЕрднреА рдпрд╣ рдлрд╝рдВрдХреНрд╢рди рд╡рд┐рдХрд╕рд┐рдд рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред", show_alert=True)
        # TODO: Implement welcome message editing logic (e.g., prompt user for new message)
        # For now, just show an alert.

    elif action.startswith("action_"):
        # This part handles mute/kick/ban actions from violation messages
        parts = action.split("_")
        action_type = parts[1] # mute, kick, ban
        target_user_id = int(parts[2])
        target_group_id = int(parts[3])
        message_id_to_delete = int(parts[4])

        chat_member = await app.get_chat_member(target_group_id, query.from_user.id)
        if chat_member.status not in [enums.ChatMemberStatus.ADMINISTRATOR, enums.ChatMemberStatus.OWNER]:
            await query.answer("рдЖрдкрдХреЛ рдЗрд╕ рдЧреНрд░реБрдк рдореЗрдВ рдЗрд╕ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреЛ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред", show_alert=True)
            return

        try:
            if action_type == "mute":
                await app.restrict_chat_member(target_group_id, target_user_id, ChatPermissions())
                await query.answer("рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдореНрдпреВрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред", show_alert=True)
            elif action_type == "kick":
                await app.ban_chat_member(target_group_id, target_user_id)
                await query.answer("рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдХрд┐рдХ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред", show_alert=True)
            elif action_type == "ban":
                await app.ban_chat_member(target_group_id, target_user_id)
                await query.answer("рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЧреНрд░реБрдк рд╕реЗ рдмреИрди рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред", show_alert=True)
            
            # Delete the original violation message from the group
            try:
                await app.delete_messages(target_group_id, message_id_to_delete)
                logger.info(f"Deleted violation message {message_id_to_delete} in group {target_group_id}")
            except Exception as e:
                logger.error(f"Could not delete message {message_id_to_delete} in group {target_group_id}: {e}")

            # Edit the log channel message to indicate action taken
            await query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(f"{action_type.capitalize()}ed by {query.from_user.first_name}", callback_data="done")
            ]]))
            
        except ChatAdminRequired:
            await query.answer("рдмреЙрдЯ рдХреЗ рдкрд╛рд╕ рдЗрд╕ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреЛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ рдПрдбрдорд┐рди рдЕрдиреБрдорддрд┐рдпрд╛рдБ рдирд╣реАрдВ рд╣реИрдВред", show_alert=True)
        except Exception as e:
            logger.error(f"Error performing {action_type} on user {target_user_id} in chat {target_group_id}: {e}")
            await query.answer(f"рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХрд░рдиреЗ рдореЗрдВ рдЕрд╕рдорд░реНрде: {e}", show_alert=True)

    else:
        await query.answer("рдЕрдЬреНрдЮрд╛рдд рдХрд╛рд░реНрд░рд╡рд╛рдИред")

# Helper to generate group settings keyboard (avoids repetition)
async def get_group_settings_keyboard(group_id: int):
    settings = get_group_settings(group_id)
    if not settings:
        return InlineKeyboardMarkup([[InlineKeyboardButton("рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдирд╣реАрдВ рдорд┐рд▓реАрдВ", callback_data="group_settings")]])

    buttons = []
    bot_status = "тЬЕ рд╕рдХреНрд╖рдо" if settings.get('bot_enabled', True) else "тЭМ рдЕрдХреНрд╖рдо"
    buttons.append([InlineKeyboardButton(f"рдмреЙрдЯ: {bot_status}", callback_data=f"toggle_setting_{group_id}_bot_enabled")])

    filters_map = {
        "filter_abusive": "рдЧрд╛рд▓рд┐рдпрд╛рдБ",
        "filter_pornographic_text": "рдЖрдкрддреНрддрд┐рдЬрдирдХ рдЯреЗрдХреНрд╕реНрдЯ",
        "filter_spam": "рд╕реНрдкреИрдо",
        "filter_links": "рд▓рд┐рдВрдХреНрд╕",
        "filter_bio_links": "рдмрд╛рдпреЛ рд▓рд┐рдВрдХреНрд╕",
        "usernamedel_enabled": "рдпреВрдЬрд░рдиреЗрдо рдлрд┐рд▓реНрдЯрд░"
    }

    for setting_key, display_name in filters_map.items():
        status = "тЬЕ рд╕рдХреНрд╖рдо" if settings.get(setting_key, True) else "тЭМ рдЕрдХреНрд╖рдо"
        buttons.append([InlineKeyboardButton(f"{display_name}: {status}", callback_data=f"toggle_setting_{group_id}_{setting_key}")])

    buttons.append([InlineKeyboardButton("рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ рдмрджрд▓реЗрдВ", callback_data=f"edit_welcome_message_{group_id}")])
    buttons.append([InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data="group_settings")])
    return InlineKeyboardMarkup(buttons)

# --- Group Join Handler ---
@app.on_message(filters.new_chat_members & filters.group)
async def welcome_new_members(client: Client, message: Message):
    chat_id = message.chat.id
    chat_title = message.chat.title

    # Log group addition if bot is added for the first time
    if client.me in message.new_chat_members:
        # Check if group already exists in DB, if not, add it
        group_settings = get_group_settings(chat_id)
        if not group_settings:
            added_by_user_id = message.from_user.id if message.from_user else None
            await add_or_update_group(chat_id, chat_title, added_by_user_id)
            
            log_message = f"**ЁЯЖХ рдирдпрд╛ рдЧреНрд░реБрдк рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛!**\n" \
                          f"рдЧреНрд░реБрдк рдХрд╛ рдирд╛рдо: `{chat_title}`\n" \
                          f"рдЧреНрд░реБрдк ID: `{chat_id}`\n" \
                          f"рдЬреЛрдбрд╝рдиреЗ рд╡рд╛рд▓рд╛: {message.from_user.mention if message.from_user else 'рдЕрдЬреНрдЮрд╛рдд'}"
            try:
                await client.send_message(NEW_USER_GROUP_LOG_CHANNEL_ID, log_message, parse_mode=ParseMode.MARKDOWN)
                logger.info(f"Sent new group log to {NEW_USER_GROUP_LOG_CHANNEL_ID}")
            except Exception as e:
                logger.error(f"Error sending new group log: {e}")
        else:
            logger.info(f"Bot re-added to existing group: {chat_title} ({chat_id})")

    group_settings = get_group_settings(chat_id)
    if not group_settings or not group_settings.get("bot_enabled", True):
        logger.info(f"Bot not enabled in group {chat_title} ({chat_id}). Skipping welcome message.")
        return

    for user in message.new_chat_members:
        if user.is_bot:
            continue # Don't welcome other bots

        await add_or_update_user(user.id, user.username, user.first_name, user.last_name, user.is_bot)

        welcome_msg_template = group_settings.get("welcome_message", "ЁЯСЛ рдирдорд╕реНрддреЗ {username}! {groupname} рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред")
        welcome_text = welcome_msg_template.format(
            username=user.mention,
            groupname=chat_title
        )
        try:
            await message.reply_text(welcome_text, quote=True)
            logger.info(f"Sent welcome message to {user.id} in {chat_id}")
        except Exception as e:
            logger.error(f"Error sending welcome message to {user.id} in {chat_id}: {e}")

        # Log new user addition
        inviter_id = message.from_user.id if message.from_user else None
        inviter_username = message.from_user.username if message.from_user else None
        log_new_user_or_group("new_user", user.id, user.first_name, inviter_id, inviter_username)
        try:
            await client.send_message(
                NEW_USER_GROUP_LOG_CHANNEL_ID,
                f"**ЁЯСд рдирдпрд╛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬреБрдбрд╝рд╛!**\n"
                f"рдирд╛рдо: {user.first_name} (@{user.username if user.username else 'N/A'})\n"
                f"ID: `{user.id}`\n"
                f"рдЧреНрд░реБрдк: `{chat_title}` (`{chat_id}`)\n"
                f"рдЬреЛрдбрд╝рдиреЗ рд╡рд╛рд▓рд╛: {message.from_user.mention if message.from_user else 'рдЕрдЬреНрдЮрд╛рдд'}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info(f"Sent new user log for {user.id} to {NEW_USER_GROUP_LOG_CHANNEL_ID}")
        except Exception as e:
            logger.error(f"Error sending new user log for {user.id}: {e}")

# --- Message Filter Handler (Main Logic for Group Moderation) ---
@app.on_message(filters.group & filters.text & ~filters.me)
async def process_message(client: Client, message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username or "N/A"
    first_name = message.from_user.first_name or ""
    chat_title = message.chat.title or "N/A"
    message_text = message.text

    # Add or update user info in DB
    await add_or_update_user(user_id, username, first_name, message.from_user.last_name, message.from_user.is_bot)

    group_settings = get_group_settings(chat_id)
    if not group_settings or not group_settings.get("bot_enabled", True):
        return # Bot is not enabled in this group

    # Check if the user is an admin or owner of the group - don't filter admins
    if await is_user_admin_in_chat(chat_id, user_id):
        logger.debug(f"User {user_id} is admin in {chat_id}. Skipping filters.")
        return

    violation_found = False
    violation_type = None

    # Filter checks based on group settings
    if group_settings.get("filter_abusive", True) and is_abusive(message_text):
        violation_found = True
        violation_type = "рдЧрд╛рд▓реА"
    elif group_settings.get("filter_pornographic_text", True) and is_pornographic_text(message_text):
        violation_found = True
        violation_type = "рдЖрдкрддреНрддрд┐рдЬрдирдХ рдЯреЗрдХреНрд╕реНрдЯ"
    elif group_settings.get("filter_links", True) and contains_links(message_text):
        violation_found = True
        violation_type = "рд▓рд┐рдВрдХ"
    elif group_settings.get("filter_spam", True) and is_spam(message_text):
        violation_found = True
        violation_type = "рд╕реНрдкреИрдо"
    elif group_settings.get("usernamedel_enabled", True) and contains_usernames(message_text):
        violation_found = True
        violation_type = "рдпреВрдЬрд░рдиреЗрдо"

    # Bio link check
    if group_settings.get("filter_bio_links", True) and not get_user_biolink_exception(user_id):
        user_has_bio_link = await has_bio_link(client, user_id)
        if user_has_bio_link:
            violation_found = True
            violation_type = "рдмрд╛рдпреЛ рд▓рд┐рдВрдХ"

    if violation_found:
        logger.warning(f"Violation detected for {username} ({user_id}) in {chat_title} ({chat_id}): {violation_type}")
        await add_violation(username, user_id, chat_title, chat_id, violation_type, message_text)

        try:
            # Delete the offending message
            await message.delete()
            logger.info(f"Deleted message by {user_id} in {chat_id} due to {violation_type}.")
        except ChatAdminRequired:
            logger.error(f"Bot is not admin in {chat_id} or missing 'Delete Messages' permission. Cannot delete message.")
            await app.send_message(chat_id, "рдореЗрд░реЗ рдкрд╛рд╕ рд╕рдВрджреЗрд╢ рд╣рдЯрд╛рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдореБрдЭреЗ 'Delete Messages' рдЕрдиреБрдорддрд┐ рджреЗрдВред")
            return
        except Exception as e:
            logger.error(f"Error deleting message in {chat_id}: {e}")
            return # Don't proceed to send case if message deletion failed

        # Send case to log channel
        case_message_link = f"https://t.me/c/{str(chat_id)[4:]}/{message.id}" # Format for public channel link
        
        case_text = (
            f"ЁЯЪл **рдирдпрд╛ рдЙрд▓реНрд▓рдВрдШрди рджрд░реНрдЬ рдХрд┐рдпрд╛ рдЧрдпрд╛!**\n"
            f"**рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛:** {message.from_user.mention} (ID: `{user_id}`)\n"
            f"**рдЧреНрд░реБрдк:** `{chat_title}` (ID: `{chat_id}`)\n"
            f"**рдЙрд▓реНрд▓рдВрдШрди рдХрд╛ рдкреНрд░рдХрд╛рд░:** `{violation_type}`\n"
            f"**рдореВрд▓ рд╕рд╛рдордЧреНрд░реА:** `{(message_text[:100] + '...') if len(message_text) > 100 else message_text}`\n"
            f"**рд╕рдордп:** `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`"
        )
        
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("тЪая╕П рдореНрдпреВрдЯ рдХрд░реЗрдВ", callback_data=f"action_mute_{user_id}_{chat_id}_{message.id}"),
                    InlineKeyboardButton("ЁЯЪ╖ рдХрд┐рдХ рдХрд░реЗрдВ", callback_data=f"action_kick_{user_id}_{chat_id}_{message.id}"),
                    InlineKeyboardButton("тЫФ рдмреИрди рдХрд░реЗрдВ", callback_data=f"action_ban_{user_id}_{chat_id}_{message.id}")
                ],
                [
                    InlineKeyboardButton("рд╕рдВрджреЗрд╢ рдкрд░ рдЬрд╛рдПрдВ", url=case_message_link) # Add link to original message
                ]
            ]
        )

        try:
            await client.send_message(CASE_LOG_CHANNEL_ID, case_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            logger.info(f"Sent case for user {user_id} to {CASE_LOG_CHANNEL_ID}")
        except Exception as e:
            logger.error(f"Error sending case to log channel {CASE_LOG_CHANNEL_ID}: {e}")
            await app.send_message(chat_id, "рдореИрдВ рдХреЗрд╕ рд▓реЙрдЧ рдЪреИрдирд▓ рдкрд░ рд╕рдВрджреЗрд╢ рдирд╣реАрдВ рднреЗрдЬ рдкрд╛ рд░рд╣рд╛ рд╣реВрдБред рдХреГрдкрдпрд╛ рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдореИрдВрдиреЗ рдЪреИрдирд▓ рдореЗрдВ рд╕рд╣реА рдЕрдиреБрдорддрд┐ рдХреЗ рд╕рд╛рде рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИред")
            
# --- Connect Group Command (Private Chat Only) ---
@app.on_message(filters.command("connectgroup") & filters.private & filters.user(OWNER_ID))
async def connect_group_command(client: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("рдЙрдкрдпреЛрдЧ: `/connectgroup <рдЧреНрд░реБрдк ID>`")
        return

    try:
        group_id = int(message.command[1])
    except ValueError:
        await message.reply_text("рдЕрдорд╛рдиреНрдп рдЧреНрд░реБрдк IDред рдХреГрдкрдпрд╛ рдПрдХ рд╕рдВрдЦреНрдпрд╛рддреНрдордХ ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВред")
        return

    try:
        chat_info = await client.get_chat(group_id)
        if chat_info.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
            await message.reply_text("рдкреНрд░рджрд╛рди рдХреА рдЧрдИ ID рдПрдХ рд╡реИрдз рдЧреНрд░реБрдк ID рдирд╣реАрдВ рд╣реИред")
            return
        
        # Ensure bot is a member of the group before connecting
        try:
            await client.get_chat_member(group_id, client.me.id)
        except UserNotParticipant:
            await message.reply_text("рдмреЙрдЯ рдЗрд╕ рдЧреНрд░реБрдк рдХрд╛ рд╕рджрд╕реНрдп рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдмреЙрдЯ рдХреЛ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝реЗрдВред")
            return

        # Add or update group in database
        await add_or_update_group(group_id, chat_info.title, message.from_user.id)
        await message.reply_text(f"`{chat_info.title}` (`{group_id}`) рдЧреНрд░реБрдк рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдХрдиреЗрдХреНрдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИред")
        logger.info(f"Owner connected group: {chat_info.title} ({group_id})")

    except PeerIdInvalid:
        await message.reply_text("Peer ID Invalidред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЧреНрд░реБрдк ID рд╕рд╣реА рд╣реИ рдФрд░ рдмреЙрдЯ рдЧреНрд░реБрдк рдХрд╛ рд╕рджрд╕реНрдп рд╣реИред")
        logger.error(f"PeerIdInvalid for group ID: {group_id}")
    except Exception as e:
        logger.error(f"Error connecting group {group_id}: {e}")
        await message.reply_text(f"рдЧреНрд░реБрдк рдвреВрдВрдврдиреЗ рдпрд╛ рдЬреЛрдбрд╝рдиреЗ рдореЗрдВ рдЕрд╕рдорд░реНрдеред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдмреЙрдЯ рдЙрд╕ рдЧреНрд░реБрдк рдХрд╛ рд╕рджрд╕реНрдп рд╣реИ рдФрд░ ID рд╕рд╣реА рд╣реИред рдПрд░рд░: {e}")

# --- Set Bio Link Exception Command (Owner Only) ---
@app.on_message(filters.command(["addbioex", "removebioex"]) & filters.private & filters.user(OWNER_ID))
async def bio_link_exception_command(client: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("рдЙрдкрдпреЛрдЧ:\n`/addbioex <рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID>` - рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдмрд╛рдпреЛ рд▓рд┐рдВрдХ рдЕрдкрд╡рд╛рдж рдЬреЛрдбрд╝реЗрдВ\n`/removebioex <рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ID>` - рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реЗ рдмрд╛рдпреЛ рд▓рд┐рдВрдХ рдЕрдкрд╡рд╛рдж рд╣рдЯрд╛рдПрдБ")
        return

    try:
        target_user_id = int(message.command[1])
    except ValueError:
        await message.reply_text("рдЕрдорд╛рдиреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ IDред")
        return

    allowed = (message.command[0] == "/addbioex")
    set_user_biolink_exception(target_user_id, allowed)
    await message.reply_text(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ `{target_user_id}` рдХреЗ рд▓рд┐рдП рдмрд╛рдпреЛ рд▓рд┐рдВрдХ рдЕрдкрд╡рд╛рдж рдХреЛ {'рд╕рдХреНрд╖рдо' if allowed else 'рдЕрдХреНрд╖рдо'} рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
    logger.info(f"Owner {message.from_user.id} set biolink exception for {target_user_id} to {allowed}")


# --- Keyword Management Commands (Owner Only) ---
@app.on_message(filters.command(["addkeyword", "removekeyword", "listkeywords"]) & filters.private & filters.user(OWNER_ID))
async def manage_keywords_command(client: Client, message: Message):
    command = message.command[0]
    
    if command == "/listkeywords":
        all_lists = get_all_keyword_lists()
        if not all_lists:
            await message.reply_text("рдХреЛрдИ рдХреАрд╡рд░реНрдб рд╕реВрдЪреА рдкрд░рд┐рднрд╛рд╖рд┐рдд рдирд╣реАрдВ рд╣реИред")
            return
        
        response = "**рдЙрдкрд▓рдмреНрдз рдХреАрд╡рд░реНрдб рд╕реВрдЪрд┐рдпрд╛рдВ:**\n"
        for list_name in all_lists:
            words = get_keyword_list(list_name)
            response += f"**- {list_name}:** {', '.join(words[:10])}{'...' if len(words) > 10 else ''} ({len(words)} рд╢рдмреНрдж)\n"
        await message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
        return

    if len(message.command) < 3:
        await message.reply_text("рдЙрдкрдпреЛрдЧ:\n`/addkeyword <рд╕реВрдЪреА рдХрд╛ рдирд╛рдо> <рд╢рдмреНрдж1,рд╢рдмреНрдж2,...>`\n`/removekeyword <рд╕реВрдЪреА рдХрд╛ рдирд╛рдо> <рд╢рдмреНрдж1,рд╢рдмреНрдж2,...>`")
        return

    list_name = message.command[1]
    keywords_str = message.command[2]
    keywords_to_process = [k.strip().lower() for k in keywords_str.split(',') if k.strip()]

    if not keywords_to_process:
        await message.reply_text("рдХреГрдкрдпрд╛ рдЬреЛрдбрд╝рдиреЗ рдпрд╛ рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХреБрдЫ рд╢рдмреНрдж рдкреНрд░рджрд╛рди рдХрд░реЗрдВред")
        return

    if command == "/addkeyword":
        count = add_keywords(list_name, keywords_to_process)
        await message.reply_text(f"рд╕реВрдЪреА `{list_name}` рдореЗрдВ `{count}` рд╢рдмреНрдж {'рдЬреЛрдбрд╝реЗ' if count > 0 else 'рдЬреЛрдбрд╝реЗ рдирд╣реАрдВ рдЧрдП'}ред")
        logger.info(f"Owner {message.from_user.id} added {count} keywords to '{list_name}'")
    elif command == "/removekeyword":
        count = remove_keywords(list_name, keywords_to_process)
        await message.reply_text(f"рд╕реВрдЪреА `{list_name}` рд╕реЗ `{count}` рд╢рдмреНрдж {'рд╣рдЯрд╛рдП' if count > 0 else 'рд╣рдЯрд╛рдП рдирд╣реАрдВ рдЧрдП'}ред")
        logger.info(f"Owner {message.from_user.id} removed {count} keywords from '{list_name}'")

# --- Mute/Unmute/Ban (Direct commands in groups - Admin only) ---
@app.on_message(filters.command(["mute", "unmute", "ban"]) & filters.group)
async def moderation_commands(client: Client, message: Message):
    chat_id = message.chat.id
    command_type = message.command[0][1:] # 'mute', 'unmute', 'ban'
    
    if not message.reply_to_message:
        await message.reply_text("рдХреГрдкрдпрд╛ рдЙрд╕ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рд╕рдВрджреЗрд╢ рдХрд╛ рдЬрд╡рд╛рдм рджреЗрдВ рдЬрд┐рд╕ рдкрд░ рдЖрдк рдпрд╣ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред")
        return

    target_user = message.reply_to_message.from_user
    if not target_user: # In case of channel posts, etc.
        await message.reply_text("рдЗрд╕ рд╕рдВрджреЗрд╢ рдХрд╛ рдХреЛрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рд╣реИред")
        return

    # Check if the issuer is admin
    if not await is_user_admin_in_chat(chat_id, message.from_user.id):
        await message.reply_text("рдЖрдкрдХреЗ рдкрд╛рд╕ рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред")
        return

    # Check if the bot is admin and has necessary permissions
    bot_member = await app.get_chat_member(chat_id, client.me.id)
    if bot_member.status != enums.ChatMemberStatus.ADMINISTRATOR:
        await message.reply_text("рдореБрдЭреЗ рдЗрд╕ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреЛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЧреНрд░реБрдк рдореЗрдВ рдПрдбрдорд┐рди рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред")
        return

    # Prevent bot from banning/muting itself or owner
    if target_user.id == client.me.id:
        await message.reply_text("рдореИрдВ рдЦреБрдж рдкрд░ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛ред")
        return
    if target_user.id == OWNER_ID:
        await message.reply_text("рдЖрдк рдорд╛рд▓рд┐рдХ рдкрд░ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗред")
        return

    # Prevent admin from banning/muting other admins (unless issuer is owner)
    if await is_user_admin_in_chat(chat_id, target_user.id) and message.from_user.id != OWNER_ID:
        await message.reply_text("рдЖрдк рджреВрд╕рд░реЗ рдПрдбрдорд┐рди рдкрд░ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗред")
        return
        
    try:
        if command_type == "mute":
            await app.restrict_chat_member(chat_id, target_user.id, ChatPermissions(can_send_messages=False))
            await message.reply_text(f"{target_user.mention} рдХреЛ рдореНрдпреВрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
            logger.info(f"User {target_user.id} muted in {chat_id} by {message.from_user.id}")
        elif command_type == "unmute":
            await app.restrict_chat_member(chat_id, target_user.id, ChatPermissions(can_send_messages=True))
            await message.reply_text(f"{target_user.mention} рдХреЛ рдЕрдирдореНрдпреВрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
            logger.info(f"User {target_user.id} unmuted in {chat_id} by {message.from_user.id}")
        elif command_type == "ban":
            await app.ban_chat_member(chat_id, target_user.id)
            await message.reply_text(f"{target_user.mention} рдХреЛ рдЧреНрд░реБрдк рд╕реЗ рдмреИрди рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
            logger.info(f"User {target_user.id} banned from {chat_id} by {message.from_user.id}")
        
        # Delete the original message that was replied to, if moderation was successful
        try:
            await message.reply_to_message.delete()
        except Exception as e:
            logger.error(f"Failed to delete replied message: {e}")

    except ChatAdminRequired:
        await message.reply_text("рдореЗрд░реЗ рдкрд╛рд╕ рдЗрд╕ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреЛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ рдПрдбрдорд┐рди рдЕрдиреБрдорддрд┐рдпрд╛рдБ рдирд╣реАрдВ рд╣реИрдВред")
        logger.warning(f"Bot lacks admin permissions for {command_type} in {chat_id}")
    except Exception as e:
        await message.reply_text(f"рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХрд░рдиреЗ рдореЗрдВ рдЕрд╕рдорд░реНрде: {e}")
        logger.error(f"Error performing {command_type} on {target_user.id} in {chat_id}: {e}")

# --- рдирдпрд╛ рдлрд╝рдВрдХреНрд╢рди рдЬрд┐рд╕реЗ server.py рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдЧрд╛ ---
async def start_bot():
    """Starts the Pyrogram bot client."""
    logger.info("Pyrogram bot client starting...")
    await app.start()
    logger.info("Pyrogram bot client started successfully.")

async def stop_bot():
    """Stops the Pyrogram bot client."""
    logger.info("Pyrogram bot client stopping...")
    await app.stop()
    logger.info("Pyrogram bot client stopped.")

# рдпрджрд┐ bot.py рдХреЛ рд╕реАрдзреЗ рдЪрд▓рд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ (Koyeb рдХреЗ рдорд╛рдорд▓реЗ рдореЗрдВ рдпрд╣ рдЖрдорддреМрд░ рдкрд░ рдирд╣реАрдВ рд╣реЛрдЧрд╛)
if __name__ == "__main__":
    logger.info("Running bot.py directly (for testing purposes).")
    app.run()
    logger.info("Bot stopped.")
