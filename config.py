# config.py

import os
from dotenv import load_dotenv
import logging
import sys

# .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ рдкрд░реНрдпрд╛рд╡рд░рдг рдЪрд░ (environment variables) рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# --- Core Bot Settings ---
# Telegram рдмреЙрдЯ рдЯреЛрдХрди
BOT_TOKEN = os.getenv("BOT_TOKEN")
# Telegram API ID (integer)
API_ID = int(os.getenv("API_ID"))
# Telegram API Hash
API_HASH = os.getenv("API_HASH")

# --- Log Channel IDs ---
# рдЗрди IDs рдХреЛ рдЕрдкрдиреА рд╡рд╛рд╕реНрддрд╡рд┐рдХ Telegram рдЪреИрдирд▓ ID рд╕реЗ рдмрджрд▓реЗрдВред
# рдпреЗ рд╣рдореЗрд╢рд╛ рдирдХрд╛рд░рд╛рддреНрдордХ рд╕рдВрдЦреНрдпрд╛рдПрдБ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП, рдЬреИрд╕реЗ -1001234567890
# рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдмреЙрдЯ рдЗрди рдЪреИрдирд▓реЛрдВ рдХрд╛ рд╕рджрд╕реНрдп рд╣реИ рдФрд░ рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рд╣реИред
CASE_LOG_CHANNEL_ID = int(os.getenv("CASE_LOG_CHANNEL_ID")) 
NEW_USER_GROUP_LOG_CHANNEL_ID = int(os.getenv("NEW_USER_GROUP_LOG_CHANNEL_ID"))

# --- Owner and Support Info ---
# рдЖрдкрдХрд╛ Telegram рдпреВрдЬрд╝рд░ ID (integer)ред рдпрд╣ рдмреЙрдЯ рдХреЗ рдорд╛рд▓рд┐рдХ рдХреЛ рдХрдорд╛рдВрдб рдПрдХреНрд╕реЗрд╕ рджреЗрддрд╛ рд╣реИред
OWNER_ID = int(os.getenv("OWNER_ID")) 
# рдЖрдкрдХреЗ рдЕрдкрдбреЗрдЯ рдЪреИрдирд▓ рдХрд╛ рдпреВрдЬрд╝рд░рдиреЗрдо (рдмрд┐рдирд╛ '@' рдХреЗ)ред
UPDATE_CHANNEL_USERNAME = os.getenv("UPDATE_CHANNEL_USERNAME", "asbhai_bsr")
# рдЖрдкрдХреЗ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдпреВрдЬрд╝рд░рдиреЗрдо рдХрд╛ рд▓рд┐рдВрдХ/рдирд╛рдо (рдмрд┐рдирд╛ '@' рдХреЗ) рд╕рдВрдкрд░реНрдХ рдХреЗ рд▓рд┐рдПред
ASBHAI_USERNAME = os.getenv("ASBHAI_USERNAME", "asbhaibsr") 

# --- Default Messages & URLs ---
# рдирдП рд╕рджрд╕реНрдпреЛрдВ рдХреЗ рд▓рд┐рдП рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬред
# {username} рдФрд░ {groupname} рдкреНрд▓реЗрд╕рд╣реЛрд▓реНрдбрд░реНрд╕ рдХреЛ рдмреЙрдЯ рджреНрд╡рд╛рд░рд╛ рдмрджрд▓ рджрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред
WELCOME_MESSAGE_DEFAULT = "ЁЯСЛ рдирдорд╕реНрддреЗ {username}! {groupname} рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред"
# рдЖрдкрдХреА рдмреЙрдЯ рдлреЛрдЯреЛ рдХрд╛ рд╕реАрдзрд╛ рд▓рд┐рдВрдХ (рдЬреИрд╕реЗ .jpg, .png)ред рдЗрд╕реЗ .env рдореЗрдВ рднреА рд╕реЗрдЯ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред
BOT_PHOTO_URL = os.getenv("BOT_PHOTO_URL", "https://envs.sh/PX8.jpg")
# рдЖрдкрдХреЗ GitHub рд░рд┐рдкреЙрдЬрд┐рдЯрд░реА рдХрд╛ рд▓рд┐рдВрдХред рдЗрд╕реЗ рдЕрдкрдбреЗрдЯ рдХрд░рдирд╛ рди рднреВрд▓реЗрдВ!
REPO_LINK = "https://github.com/your-github-username/your-repo-name" 

# --- Cooldowns ---
# рдХрдорд╛рдВрдб рдХреЗ рдмреАрдЪ рдиреНрдпреВрдирддрдо рд╕рдордп (рд╕реЗрдХрдВрдб рдореЗрдВ) рддрд╛рдХрд┐ рд╕реНрдкреИрдо рдХреЛ рд░реЛрдХрд╛ рдЬрд╛ рд╕рдХреЗред
COMMAND_COOLDOWN_TIME = int(os.getenv("COMMAND_COOLDOWN_TIME", 5))

# --- Logging Configuration ---
# Pyrogram рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдХреЗ рд▓рд┐рдП рд▓реЙрдЧрд┐рдВрдЧ рд╕реНрддрд░ рд╕реЗрдЯ рдХрд░реЗрдВред
# DEBUG рдЕрдзрд┐рдХ рд╡рд┐рд╕реНрддреГрдд рд▓реЙрдЧрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП, INFO рд╕рд╛рдорд╛рдиреНрдп рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдПред
logging.getLogger("pyrogram").setLevel(logging.INFO) 

# рдЖрдкрдХреЗ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдХреЗ рд▓рд┐рдП рд╕рд╛рдорд╛рдиреНрдп рд▓реЙрдЧрд┐рдВрдЧ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рдиред
logging.basicConfig(
    level=logging.INFO, # рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд╕реНрддрд░ рдЖрдкрдХреЗ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рд▓реЙрдЧ рдХреЗ рд▓рд┐рдП
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot_logs.log"), # рд▓реЙрдЧ рдХреЛ 'bot_logs.log' рдирд╛рдордХ рдлрд╛рдЗрд▓ рдореЗрдВ рд╕реЗрд╡ рдХрд░реЗрдВ
        logging.StreamHandler(sys.stdout) # рд▓реЙрдЧ рдХреЛ рдХрдВрд╕реЛрд▓ (рдЯрд░реНрдорд┐рдирд▓) рдореЗрдВ рдкреНрд░рд┐рдВрдЯ рдХрд░реЗрдВ
    ]
)
# рдПрдХ рд▓реЙрдЧрд░ рдЗрдВрд╕реНрдЯреЗрдВрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ рдЬрд┐рд╕рдХрд╛ рдЙрдкрдпреЛрдЧ рдЖрдкрдХреЗ рдХреЛрдб рдореЗрдВ рд▓реЙрдЧ рд╕рдВрджреЗрд╢реЛрдВ рдХреЛ рд▓рд┐рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗред
logger = logging.getLogger(__name__)

# --- Configuration Validation ---
# рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рд╕рднреА рдЖрд╡рд╢реНрдпрдХ рдкрд░реНрдпрд╛рд╡рд░рдг рдЪрд░ рд╕реЗрдЯ рд╣реИрдВред
# рдпрджрд┐ рдХреЛрдИ рднреА рдЖрд╡рд╢реНрдпрдХ рдЪрд░ рдорд┐рд╕рд┐рдВрдЧ рд╣реИ, рддреЛ рдмреЙрдЯ рд╢реБрд░реВ рдирд╣реАрдВ рд╣реЛрдЧрд╛ рдФрд░ рдПрдХ рдЧрдВрднреАрд░ рддреНрд░реБрдЯрд┐ рд▓реЙрдЧ рдХрд░реЗрдЧрд╛ред
if not all([BOT_TOKEN, API_ID, API_HASH, CASE_LOG_CHANNEL_ID, NEW_USER_GROUP_LOG_CHANNEL_ID, OWNER_ID]):
    logger.critical("рдЖрд╡рд╢реНрдпрдХ рдкрд░реНрдпрд╛рд╡рд░рдг рдЪрд░ (`BOT_TOKEN`, `API_ID`, `API_HASH`, `CASE_LOG_CHANNEL_ID`, `NEW_USER_GROUP_LOG_CHANNEL_ID`, `OWNER_ID`) рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИрдВред рдХреГрдкрдпрд╛ рдЕрдкрдиреА `.env` рдлрд╝рд╛рдЗрд▓ рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред")
    sys.exit(1) # рдпрджрд┐ рдЖрд╡рд╢реНрдпрдХ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдирд╣реАрдВ рд╣реИ рддреЛ рдмреЙрдЯ рдХреЛ рддреБрд░рдВрдд рдмрдВрдж рдХрд░реЗрдВ
