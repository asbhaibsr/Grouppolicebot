# server.py

import os
import asyncio
import re
import html
import time
import requests
import logging
import threading

from pyrogram import Client, filters, enums
from pyrogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    ChatMemberUpdated, CallbackQuery
)
from pyrogram.enums import ChatMemberStatus, ChatType, ParseMode
from datetime import timedelta, datetime

# Assuming config and database are in the same directory or accessible
try:
    from config import (
        BOT_TOKEN, API_ID, API_HASH, CASE_LOG_CHANNEL_ID, NEW_USER_GROUP_LOG_CHANNEL_ID,
        OWNER_ID, UPDATE_CHANNEL_USERNAME, ASBHAI_USERNAME,
        WELCOME_MESSAGE_DEFAULT, BOT_PHOTO_URL, REPO_LINK,
        COMMAND_COOLDOWN_TIME, logger # Import logger from config
    )
except ImportError as e:
    print(f"Error importing from config.py: {e}")
    print("Please ensure config.py exists and contains all required variables.")
    exit(1) # ‡§Ø‡§¶‡§ø ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó ‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§§‡•Ä ‡§π‡•à ‡§§‡•ã ‡§è‡§ó‡•ç‡§ú‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç

try:
    from database import (
        add_or_update_user, get_user, add_or_update_group, get_group,
        update_group_settings, get_all_groups, delete_group,
        add_warn, get_warns, delete_warns,
        add_command_cooldown, get_command_cooldown, reset_command_cooldown
    )
except ImportError as e:
    print(f"Error importing from database.py: {e}")
    print("Please ensure database.py exists and contains all required functions.")
    exit(1)

try:
    from filters import (
        is_abusive, is_pornographic_text, contains_links, is_spam, has_bio_link, contains_usernames
    )
except ImportError as e:
    print(f"Error importing from filters.py: {e}")
    print("Please ensure filters.py exists and contains all required functions.")
    exit(1)

from flask import Flask, jsonify

# --- Flask Server for Health Checks (Koyeb specific) ---
app = Flask(__name__)

@app.route('/')
def health_check():
    return jsonify(
        status="running",
        bot_name=pyrogram_app.me.first_name if pyrogram_app.me else "N/A",
        bot_id=pyrogram_app.me.id if pyrogram_app.me else "N/A"
    )

def run_flask_app():
    # Use 0.0.0.0 for Koyeb deployment
    app.run(host='0.0.0.0', port=os.getenv("PORT", 8000), debug=False)

# Start Flask app in a separate thread
flask_thread = threading.Thread(target=run_flask_app)
flask_thread.daemon = True # Daemonize thread so it exits when main program exits
logger.info("Flask app starting on port 8000")
flask_thread.start()
logger.info("Flask server started in a separate thread.")

# Give Flask server a few seconds to warm up for health checks
time.sleep(5)
logger.info("Giving Flask server 5 seconds to warm up for health checks.")


# --- Pyrogram Client Initialization ---
pyrogram_app = Client(
    "GroupPoliceBot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    plugins=dict(root="plugins") # This assumes you have a 'plugins' folder
)

# --- Helper Functions ---
async def is_user_admin_in_chat(client: Client, chat_id: int, user_id: int) -> bool:
    try:
        member = await client.get_chat_member(chat_id, user_id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except Exception as e:
        logger.error(f"Error checking admin status for user {user_id} in chat {chat_id}: {e}")
        return False

async def is_bot_admin_in_chat(client: Client, chat_id: int) -> bool:
    try:
        bot_member = await client.get_chat_member(chat_id, client.me.id)
        return bot_member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except Exception as e:
        logger.error(f"Error checking bot admin status in chat {chat_id}: {e}")
        return False

def check_cooldown(user_id: int, command_name: str) -> bool:
    last_use_time = get_command_cooldown(user_id, command_name)
    if last_use_time:
        elapsed_time = (datetime.now() - last_use_time).total_seconds()
        if elapsed_time < COMMAND_COOLDOWN_TIME:
            return False
    add_command_cooldown(user_id, command_name, datetime.now())
    logger.info(f"User {user_id} cooldown updated for command.")
    return True

# --- Custom Filters ---
# New function for the 'not edited' filter
def is_not_edited_message(_, m: Message):
    return not m.edit_date

# --- Message Handlers ---

@pyrogram_app.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    logger.info(f"[{message.chat.id}] Received /start command from user {message.from_user.id} ({message.from_user.first_name}).")
    if not check_cooldown(message.from_user.id, "command"):
        return

    user = message.from_user
    add_or_update_user(user.id, user.username, user.first_name, user.last_name, user.is_bot)
    logger.info(f"User {user.id} data added/updated on /start.")
    
    keyboard = [
        [InlineKeyboardButton("‚ûï ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{client.me.username}?startgroup=true")],
        [InlineKeyboardButton("‚ùì ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ", callback_data="help_menu")],
        [InlineKeyboardButton("üì¢ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}")],
        [InlineKeyboardButton("üîó ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•ã‡§°", url=REPO_LINK)],
        [InlineKeyboardButton("üìû ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{ASBHAI_USERNAME}")]
    ]

    is_connected_group_admin = False
    all_current_groups = get_all_groups()
    for group_data in all_current_groups:
        try:
            bot_member = await client.get_chat_member(group_data["_id"], client.me.id) # Use _id from database
            if bot_member.status != ChatMemberStatus.LEFT:
                if await is_user_admin_in_chat(client, group_data["_id"], user.id):
                    is_connected_group_admin = True
                    break
        except Exception as e:
            logger.warning(f"Error checking admin status for group {group_data.get('title', group_data['_id'])}: {e}")

    if is_connected_group_admin:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏", callback_data="settings_menu")])
        logger.info(f"Settings button added for user {user.id}.")

    reply_markup = InlineKeyboardMarkup(keyboard)

    start_message_text = (
        f"üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user.first_name}! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å, {client.me.first_name}.\n\n"
        "‡§Æ‡•à‡§Ç ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ö‡•à‡§ü ‡§ï‡•ã ‡§Æ‡•â‡§°‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á, ‡§∏‡•ç‡§™‡•à‡§Æ, ‡§Ö‡§®‡•Å‡§ö‡§ø‡§§ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§î‡§∞ ‡§Ö‡§µ‡§æ‡§Ç‡§õ‡§ø‡§§ ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•ã ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å‡•§\n"
        "‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?"
    )

    try:
        await message.reply_photo(
            photo=BOT_PHOTO_URL,
            caption=start_message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"Start message with photo sent to user {user.id}.")
    except Exception as e:
        logger.error(f"Error sending start message with photo to user {user.id}: {e}. Sending text only.", exc_info=True)
        await message.reply_text(
            start_message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"Start message (text only) sent to user {user.id}.")


@pyrogram_app.on_message(filters.command("help") & filters.private)
async def help_command(client: Client, message: Message):
    logger.info(f"[{message.chat.id}] Received /help command from user {message.from_user.id}.")
    if not check_cooldown(message.from_user.id, "command"):
        return

    help_text = (
        "ü§ñ **‡§¨‡•â‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:**\n\n"
        "**‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§Æ‡•á‡§Ç:**\n"
        "  ‚Ä¢ `/start` - ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/help` - ‡§Ø‡§π ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/settings` - ‡§Ö‡§™‡§®‡•á ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§ (‡§ï‡•á‡§µ‡§≤ ‡§â‡§® ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§¨‡•â‡§ü ‡§π‡•à)\n"
        "  ‚Ä¢ `/connectgroup <group_id>` - ‡§è‡§ï ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•ã ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n\n"
        "**‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç:**\n"
        "  ‚Ä¢ `/ban <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§¨‡•à‡§® ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/unban <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/kick <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§ï‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/mute <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§∏‡•á ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/unmute <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§∏‡•á ‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/warn <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§Ç‡•§ 3 ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§¨‡•à‡§®‡•§\n"
        "  ‚Ä¢ `/warnings <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/resetwarns <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/info <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/setwelcome [message]` - ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§ (`{username}`, `{groupname}` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç)\n"
        "  ‚Ä¢ `/welcomesettings` - ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/clean [count]` - ‡§™‡§ø‡§õ‡§≤‡•Ä 'count' ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n"
        "  ‚Ä¢ `/settings` - ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§\n\n"
        "**‚öôÔ∏è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•ã ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ü‡§™‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è ‡§î‡§∞ ‡§¨‡•â‡§ü ‡§≠‡•Ä ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§**"
    )
    await message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)


@pyrogram_app.on_callback_query()
async def callback_query_handler(client: Client, callback_query: CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.id

    logger.info(f"[{chat_id}] Callback query received: {data} from user {user_id}.")

    if data == "help_menu":
        help_text = (
            "ü§ñ **‡§¨‡•â‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:**\n\n"
            "**‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§Æ‡•á‡§Ç:**\n"
            "  ‚Ä¢ `/start` - ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/help` - ‡§Ø‡§π ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/settings` - ‡§Ö‡§™‡§®‡•á ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§ (‡§ï‡•á‡§µ‡§≤ ‡§â‡§® ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§¨‡•â‡§ü ‡§π‡•à)\n"
            "  ‚Ä¢ `/connectgroup <group_id>` - ‡§è‡§ï ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•ã ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n\n"
            "**‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç:**\n"
            "  ‚Ä¢ `/ban <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§¨‡•à‡§® ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/unban <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/kick <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§ï‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/mute <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§∏‡•á ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/unmute <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§∏‡•á ‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/warn <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§Ç‡•§ 3 ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§¨‡•à‡§®‡•§\n"
            "  ‚Ä¢ `/warnings <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/resetwarns <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/info <reply_to_user>` - ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/setwelcome [message]` - ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§ (`{username}`, `{groupname}` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç)\n"
            "  ‚Ä¢ `/welcomesettings` - ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/clean [count]` - ‡§™‡§ø‡§õ‡§≤‡•Ä 'count' ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§\n"
            "  ‚Ä¢ `/settings` - ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§\n\n"
            "**‚öôÔ∏è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•ã ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ü‡§™‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è ‡§î‡§∞ ‡§¨‡•â‡§ü ‡§≠‡•Ä ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§**"
        )
        keyboard = [[InlineKeyboardButton("üîô ‡§µ‡§æ‡§™‡§∏", callback_data="start_menu")]]
        await callback_query.message.edit_caption(help_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
        await callback_query.answer()

    elif data == "start_menu":
        user = callback_query.from_user
        keyboard = [
            [InlineKeyboardButton("‚ûï ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{client.me.username}?startgroup=true")],
            [InlineKeyboardButton("‚ùì ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ", callback_data="help_menu")],
            [InlineKeyboardButton("üì¢ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}")],
            [InlineKeyboardButton("üîó ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•ã‡§°", url=REPO_LINK)],
            [InlineKeyboardButton("üìû ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{ASBHAI_USERNAME}")]
        ]

        is_connected_group_admin = False
        all_current_groups = get_all_groups()
        for group_data in all_current_groups:
            try:
                bot_member = await client.get_chat_member(group_data["_id"], client.me.id)
                if bot_member.status != ChatMemberStatus.LEFT:
                    if await is_user_admin_in_chat(client, group_data["_id"], user_id):
                        is_connected_group_admin = True
                        break
            except Exception as e:
                logger.warning(f"Error checking admin status for group {group_data.get('title', group_data['_id'])} during start menu for user {user_id}: {e}")

        if is_connected_group_admin:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏", callback_data="settings_menu")])
            logger.info(f"Settings button added for user {user_id} via callback.")

        reply_markup = InlineKeyboardMarkup(keyboard)

        start_message_text = (
            f"üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user.first_name}! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å, {client.me.first_name}.\n\n"
            "‡§Æ‡•à‡§Ç ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ö‡•à‡§ü ‡§ï‡•ã ‡§Æ‡•â‡§°‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á, ‡§∏‡•ç‡§™‡•à‡§Æ, ‡§Ö‡§®‡•Å‡§ö‡§ø‡§§ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§î‡§∞ ‡§Ö‡§µ‡§æ‡§Ç‡§õ‡§ø‡§§ ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•ã ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å‡•§\n"
            "‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?"
        )
        await callback_query.message.edit_caption(start_message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        await callback_query.answer()

    elif data == "settings_menu":
        if chat_id < 0: # If accessed from a group
            group_id = chat_id
            if not await is_user_admin_in_chat(client, group_id, user_id):
                await callback_query.answer("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è!", show_alert=True)
                return
            if not await is_bot_admin_in_chat(client, group_id):
                await callback_query.answer("‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§", show_alert=True)
                return
            await show_group_settings(client, callback_query.message, group_id)
        else: # If accessed from private chat
            await show_private_settings_menu(client, callback_query.message, user_id)
        await callback_query.answer()

    elif data.startswith("select_group_"):
        group_id = int(data.split("_")[2])
        if not await is_user_admin_in_chat(client, group_id, user_id):
            await callback_query.answer("‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§", show_alert=True)
            return
        if not await is_bot_admin_in_chat(client, group_id):
            await callback_query.answer("‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§", show_alert=True)
            return
        await show_group_settings(client, callback_query.message, group_id)
        await callback_query.answer()

    elif data.startswith("toggle_"):
        parts = data.split("_")
        setting_name = "_".join(parts[1:-1]) # Handles names like 'anti_link_enabled'
        group_id = int(parts[-1])

        if not await is_user_admin_in_chat(client, group_id, user_id):
            await callback_query.answer("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è!", show_alert=True)
            return
        if not await is_bot_admin_in_chat(client, group_id):
            await callback_query.answer("‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§", show_alert=True)
            return

        group_data = get_group(group_id)
        if group_data:
            current_value = group_data.get(setting_name, False)
            new_value = not current_value
            update_group_settings(group_id, {setting_name: new_value})
            logger.info(f"Group {group_id}: Setting '{setting_name}' toggled to {new_value} by user {user_id}.")
            await show_group_settings(client, callback_query.message, group_id)
        else:
            await callback_query.answer("‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç‡•§", show_alert=True)
        await callback_query.answer()

    elif data.startswith("welcome_"):
        parts = data.split("_")
        action = parts[1]
        group_id = int(parts[2])

        if not await is_user_admin_in_chat(client, group_id, user_id):
            await callback_query.answer("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è!", show_alert=True)
            return
        if not await is_bot_admin_in_chat(client, group_id):
            await callback_query.answer("‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§", show_alert=True)
            return
        
        group_data = get_group(group_id)
        if not group_data:
            await callback_query.answer("‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç‡•§", show_alert=True)
            return

        if action == "toggle":
            current_value = group_data.get("welcome_enabled", False)
            new_value = not current_value
            update_group_settings(group_id, {"welcome_enabled": new_value})
            logger.info(f"Group {group_id}: Welcome enabled toggled to {new_value} by user {user_id}.")
            await show_group_settings(client, callback_query.message, group_id)
        elif action == "set_custom":
            await callback_query.message.edit_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§Ø‡§æ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç‡•§ ‡§Ü‡§™ `{username}` ‡§î‡§∞ `{groupname}` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
                                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô ‡§µ‡§æ‡§™‡§∏", callback_data=f"back_to_settings_{group_id}")]])
                                                 )
            # Set a temporary state for the user to wait for the next message
            client.waiting_for_welcome_message = user_id 
            client.waiting_for_welcome_group = group_id
        elif action == "reset_default":
            update_group_settings(group_id, {"welcome_message": WELCOME_MESSAGE_DEFAULT})
            logger.info(f"Group {group_id}: Welcome message reset to default by user {user_id}.")
            await show_group_settings(client, callback_query.message, group_id)
        
        await callback_query.answer()

    elif data.startswith("back_to_settings_"):
        group_id = int(data.split("_")[3])
        if not await is_user_admin_in_chat(client, group_id, user_id):
            await callback_query.answer("‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§", show_alert=True)
            return
        if not await is_bot_admin_in_chat(client, group_id):
            await callback_query.answer("‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§", show_alert=True)
            return
        await show_group_settings(client, callback_query.message, group_id)
        await callback_query.answer()

    elif data.startswith("take_action_"):
        user_id_to_act = int(parts[2])
        group_id = int(parts[3])
        logger.info(f"User {callback_query.from_user.id} attempting to take action on user {user_id_to_act} in group {group_id}.")
        if not await is_user_admin_in_chat(client, group_id, callback_query.from_user.id):
            await callback_query.answer("‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§", show_alert=True)
            return
            
        action_keyboard = [
            [InlineKeyboardButton("üîá ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡•á‡§Ç (1 ‡§ò‡§Ç‡§ü‡§æ)", callback_data=f"mute_user_{user_id_to_act}_{group_id}_3600")],
            [InlineKeyboardButton("üë¢ ‡§ï‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç", callback_data=f"kick_user_{user_id_to_act}_{group_id}")],
            [InlineKeyboardButton("üö´ ‡§¨‡•à‡§® ‡§ï‡§∞‡•á‡§Ç", callback_data=f"ban_user_{user_id_to_act}_{group_id}")],
            [InlineKeyboardButton("‚ö†Ô∏è ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§Ç", callback_data=f"warn_user_{user_id_to_act}_{group_id}")],
            [InlineKeyboardButton("‚ùå ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç", callback_data=f"cancel_action_{user_id_to_act}_{group_id}")]
        ]
        await callback_query.message.edit_text(
            f"[{user_id_to_act}](tg://user?id={user_id_to_act}) ‡§™‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à?",
            reply_markup=InlineKeyboardMarkup(action_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"Action menu sent for user {user_id_to_act} in group {group_id}.")

    elif data.startswith("manage_permission_"):
        user_id_to_manage = int(parts[2])
        group_id = int(parts[3]) # Assuming group_id is always passed for admin check
        logger.info(f"User {callback_query.from_user.id} attempting to manage bio link permission for user {user_id_to_manage} in group {group_id}.")
        if not await is_user_admin_in_chat(client, group_id, callback_query.from_user.id):
            await callback_query.answer("‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§", show_alert=True)
            return

        # get_user_biolink_exception is not in database.py. Assuming it's a user setting.
        # For now, let's assume it's part of user_data or a separate collection.
        # If it's not in database.py, you'll need to add it.
        # For demonstration, I'll use a placeholder for get_user_biolink_exception.
        # You need to implement get_user_biolink_exception and set_user_biolink_exception in database.py
        # or remove this feature if not needed.
        # current_permission = get_user_biolink_exception(user_id_to_manage) # This function is missing
        current_permission = False # Placeholder
        permission_status_text = "‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à" if current_permission else "‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à"
        logger.info(f"Current bio link permission for user {user_id_to_manage}: {permission_status_text}")

        permission_keyboard = [
            [InlineKeyboardButton("‚úÖ ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç", callback_data=f"set_bio_permission_{user_id_to_manage}_true")],
            [InlineKeyboardButton("‚ùå ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§® ‡§¶‡•á‡§Ç", callback_data=f"set_bio_permission_{user_id_to_manage}_false")]
        ]
        await callback_query.message.edit_text(
            f"[{user_id_to_manage}](tg://user?id={user_id_to_manage}) ‡§ï‡•ã ‡§¨‡§æ‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç: **{permission_status_text}**\n\n"
            f"‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§Ç?",
            reply_markup=InlineKeyboardMarkup(permission_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"Bio link permission menu sent for user {user_id_to_manage}.")

    elif data.startswith("set_bio_permission_"):
        user_id = int(parts[2])
        permission_status = parts[3] == 'true'
        # set_user_biolink_exception(user_id, permission_status) # This function is missing
        await callback_query.message.edit_text(f"[{user_id}](tg://user?id={user_id}) ‡§ï‡•ã ‡§¨‡§æ‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø {'‡§Æ‡§ø‡§≤ ‡§ó‡§à ‡§π‡•à' if permission_status else '‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à'}‡•§", parse_mode=ParseMode.MARKDOWN)
        logger.info(f"Bio link permission for user {user_id} set to {permission_status}.")


    elif data.startswith("mute_user_") or data.startswith("kick_user_") or data.startswith("ban_user_") or data.startswith("warn_user_"):
        action_type = parts[0]
        user_id_target = int(parts[1])
        group_id = int(parts[2])
        duration = int(parts[3]) if len(parts) > 3 else None # For mute action

        if not await is_user_admin_in_chat(client, group_id, user_id):
            await callback_query.answer("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§", show_alert=True)
            return
        if not await is_bot_admin_in_chat(client, group_id):
            await callback_query.answer("‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§", show_alert=True)
            return

        try:
            target_user_info = await client.get_users(user_id_target)
            
            if action_type == "mute_user":
                await client.restrict_chat_member(
                    chat_id=group_id,
                    user_id=user_id_target,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=datetime.now() + timedelta(seconds=duration)
                )
                await callback_query.message.edit_text(f"‚úÖ {target_user_info.mention} ‡§ï‡•ã {duration/60} ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
                logger.info(f"User {user_id_target} muted for {duration/60} mins in group {group_id}.")
            elif action_type == "kick_user":
                await client.ban_chat_member(chat_id=group_id, user_id=user_id_target)
                await client.unban_chat_member(chat_id=group_id, user_id=user_id_target)
                await callback_query.message.edit_text(f"‚úÖ {target_user_info.mention} ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§ï‡§ø‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
                logger.info(f"User {user_id_target} kicked from group {group_id}.")
            elif action_type == "ban_user":
                await client.ban_chat_member(chat_id=group_id, user_id=user_id_target)
                await callback_query.message.edit_text(f"‚úÖ {target_user_info.mention} ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§¨‡•à‡§® ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
                logger.info(f"User {user_id_target} banned from group {group_id}.")
            elif action_type == "warn_user":
                current_warns = add_warn(group_id, user_id_target)
                group_data = get_group(group_id)
                warn_limit = group_data.get("warn_limit", 3)
                warn_message = f"‚ö†Ô∏è {target_user_info.mention} ‡§ï‡•ã {current_warns}/{warn_limit} ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à‡•§"
                if current_warns >= warn_limit:
                    await client.ban_chat_member(group_id, user_id_target)
                    warn_message += f"\n{target_user_info.mention} ‡§ï‡•ã {warn_limit} ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§¨‡•à‡§® ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§"
                    delete_warns(group_id, user_id_target)
                await callback_query.message.edit_text(warn_message, parse_mode=ParseMode.MARKDOWN)
                logger.info(f"User {user_id_target} warned in group {group_id}. Total warns: {current_warns}.")

            # Log to case log channel
            if CASE_LOG_CHANNEL_ID:
                await client.send_message(
                    CASE_LOG_CHANNEL_ID,
                    f"üö® **‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à:** `{action_type.replace('_user', '').capitalize()}`\n"
                    f"‡§ó‡•ç‡§∞‡•Å‡§™: `{callback_query.message.chat.title}` (ID: `{group_id}`)\n"
                    f"‡§Ø‡•Ç‡§ú‡§º‡§∞: [{target_user_info.first_name}](tg://user?id={user_id_target}) (ID: `{user_id_target}`)\n"
                    f"‡§è‡§°‡§Æ‡§ø‡§®: [{callback_query.from_user.first_name}](tg://user?id={user_id}) (ID: `{user_id}`)"
                )
        except Exception as e:
            logger.error(f"Error performing action {action_type} for user {user_id_target} in group {group_id}: {e}", exc_info=True)
            await callback_query.message.edit_text(f"‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à: `{e}`")

    elif data.startswith("cancel_action_"):
        user_id_target = int(parts[2])
        group_id = int(parts[3])
        await callback_query.message.edit_text(f"[{user_id_target}](tg://user?id={user_id_target}) ‡§™‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à‡•§", parse_mode=ParseMode.MARKDOWN)
        logger.info(f"Action cancelled for user {user_id_target} in group {group_id} by {user_id}.")

    elif data == "close_settings":
        await callback_query.message.edit_text("‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à‡§Ç‡•§")
        logger.info(f"Settings closed by user {user_id}.")


async def show_group_settings(client: Client, message: Message, group_id: int):
    group_data = get_group(group_id)
    if not group_data:
        await message.edit_text("‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç‡•§ ‡§∂‡§æ‡§Ø‡§¶ ‡§Ø‡§π ‡§¨‡•â‡§ü ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
        return

    group_title = group_data.get("title", f"Group ID: {group_id}")

    # Default values if settings not explicitly found
    welcome_enabled = group_data.get("welcome_enabled", False)
    welcome_message = group_data.get("welcome_message", WELCOME_MESSAGE_DEFAULT)
    anti_link_enabled = group_data.get("anti_link_enabled", False)
    anti_flood_enabled = group_data.get("anti_flood_enabled", False)
    
    settings_text = (
        f"‚öôÔ∏è **{group_title}** ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏:\n\n"
        f"‚û°Ô∏è ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú: {'‚úÖ ‡§ö‡§æ‡§≤‡•Ç' if welcome_enabled else '‚ùå ‡§¨‡§Ç‡§¶'}\n"
        f"‚û°Ô∏è ‡§è‡§Ç‡§ü‡•Ä-‡§≤‡§ø‡§Ç‡§ï: {'‚úÖ ‡§ö‡§æ‡§≤‡•Ç' if anti_link_enabled else '‚ùå ‡§¨‡§Ç‡§¶'}\n"
        f"‚û°Ô∏è ‡§è‡§Ç‡§ü‡•Ä-‡§´‡•ç‡§≤‡§°: {'‚úÖ ‡§ö‡§æ‡§≤‡•Ç' if anti_flood_enabled else '‚ùå ‡§¨‡§Ç‡§¶'}\n"
        f"\n**‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú:**\n`{html.escape(welcome_message)}`"
    )

    keyboard = [
        [
            InlineKeyboardButton(f"‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú: {'‚ùå ‡§¨‡§Ç‡§¶' if welcome_enabled else '‚úÖ ‡§ö‡§æ‡§≤‡•Ç'}", callback_data=f"welcome_toggle_{group_id}"),
            InlineKeyboardButton("‡§µ‡•á‡§≤‡§ï‡§Æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏", callback_data=f"welcome_set_custom_{group_id}") # Changed to set_custom directly
        ],
        [InlineKeyboardButton(f"‡§è‡§Ç‡§ü‡•Ä-‡§≤‡§ø‡§Ç‡§ï: {'‚ùå ‡§¨‡§Ç‡§¶' if anti_link_enabled else '‚úÖ ‡§ö‡§æ‡§≤‡•Ç'}", callback_data=f"toggle_anti_link_enabled_{group_id}")],
        [InlineKeyboardButton(f"‡§è‡§Ç‡§ü‡•Ä-‡§´‡•ç‡§≤‡§°: {'‚ùå ‡§¨‡§Ç‡§¶' if anti_flood_enabled else '‚úÖ ‡§ö‡§æ‡§≤‡•Ç'}", callback_data=f"toggle_anti_flood_enabled_{group_id}")],
        [InlineKeyboardButton("üîô ‡§∏‡§≠‡•Ä ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏", callback_data="settings_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.edit_caption(settings_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)


async def show_private_settings_menu(client: Client, message: Message, user_id: int):
    user_admin_groups = []
    all_known_groups = get_all_groups()

    for group_data in all_known_groups:
        try:
            bot_member = await client.get_chat_member(group_data["_id"], client.me.id)
            if bot_member.status != ChatMemberStatus.LEFT:
                if await is_user_admin_in_chat(client, group_data["_id"], user_id):
                    user_admin_groups.append(group_data)
        except Exception as e:
            logger.warning(f"Could not verify bot/user admin status for group {group_data.get('title', group_data['_id'])}: {e}")

    if not user_admin_groups:
        await message.edit_text(
            "‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§ê‡§∏‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç ‡§ú‡§π‡§æ‡§Å ‡§Æ‡•à‡§Ç ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•Ç‡§Å‡•§ "
            "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç‡•§"
        )
        return

    keyboard = []
    for group in user_admin_groups:
        keyboard.append([InlineKeyboardButton(group["title"], callback_data=f"select_group_{group['_id']}")])
    
    keyboard.append([InlineKeyboardButton("üîô ‡§µ‡§æ‡§™‡§∏", callback_data="start_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.edit_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§Ü‡§™ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç:", reply_markup=reply_markup)


@pyrogram_app.on_message(filters.command("connectgroup") & filters.private)
async def connect_group_command(client: Client, message: Message):
    logger.info(f"[{message.chat.id}] Received /connectgroup command from user {message.from_user.id} ({message.from_user.first_name}).")
    if not check_cooldown(message.from_user.id, "command"):
        return

    if not message.text or len(message.command) < 2:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/connectgroup -1001234567890`\n"
                                 "**‡§®‡•ã‡§ü:** ‡§ó‡•ç‡§∞‡•Å‡§™ ID ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ `-100` ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§")
        logger.warning(f"User {message.from_user.id} did not provide group ID for /connectgroup.")
        return

    try:
        group_id = int(message.command[1])
        if group_id >= 0: # Telegram group IDs are usually negative
            raise ValueError("Group ID must be a negative integer (e.g., -100...).")
        logger.info(f"Attempting to connect group with ID: {group_id}")
    except ValueError as ve:
        await message.reply_text(f"‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ó‡•ç‡§∞‡•Å‡§™ ID‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç, ‡§ú‡•ã `-100` ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ ‡§è‡§∞‡§∞: `{ve}`")
        logger.warning(f"Invalid group ID provided by user {message.from_user.id}: '{message.command[1]}'. Error: {ve}")
        return

    chat_info = None
    try:
        chat_info = await client.get_chat(group_id)
        if chat_info.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
            await message.reply_text("‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§à ID ‡§è‡§ï ‡§µ‡•à‡§ß ‡§ó‡•ç‡§∞‡•Å‡§™ ID ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
            logger.warning(f"Provided ID {group_id} is not a group/supergroup for user {message.from_user.id}.")
            return
        logger.info(f"Found chat info for group {group_id}: {chat_info.title}")
    except Exception as e:
        error_message = str(e)
        reply_msg = f"‡§ó‡•ç‡§∞‡•Å‡§™ ‡§¢‡•Ç‡§Ç‡§¢‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡•§ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§â‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§π‡•à ‡§î‡§∞ ID ‡§∏‡§π‡•Ä ‡§π‡•à‡•§"
        if "Peer id invalid" in error_message or "chat not found" in error_message.lower():
            reply_msg += "\n\n**‡§∏‡§Ç‡§≠‡§µ ‡§ï‡§æ‡§∞‡§£:** ‡§¨‡•â‡§ü ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ ‡§Ü‡§™‡§®‡•á ‡§ó‡§≤‡§§ ‡§ó‡•ç‡§∞‡•Å‡§™ ID ‡§¶‡•Ä ‡§π‡•à‡•§ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§™‡§π‡§≤‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡•§"
        
        await message.reply_text(f"{reply_msg} ‡§è‡§∞‡§∞: `{e}`")
        logger.error(f"Failed to get chat info for group {group_id} for user {message.from_user.id}: {e}", exc_info=True)
        return

    try:
        bot_member = await client.get_chat_member(group_id, client.me.id)
        if bot_member.status == ChatMemberStatus.LEFT:
            await message.reply_text("‡§¨‡•â‡§ü ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡•§")
            logger.warning(f"Bot is not a member of group {group_id} for user {message.from_user.id}.")
            return
    except Exception as e:
        await message.reply_text(f"‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•: `{e}`")
        logger.error(f"Error checking bot's membership in group {group_id}: {e}", exc_info=True)
        return

    if not await is_user_admin_in_chat(client, group_id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™ ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç, ‡§á‡§∏‡§≤‡§ø‡§è ‡§á‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§")
        logger.warning(f"User {message.from_user.id} tried to connect group {group_id} but is not an admin.")
        return

    add_or_update_group(group_id, chat_info.title, message.from_user.id)
    await message.reply_text(f"‡§ó‡•ç‡§∞‡•Å‡§™ '{chat_info.title}' ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à! ‡§Ö‡§¨ ‡§Ü‡§™ ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§")
    logger.info(f"Group '{chat_info.title}' ({group_id}) connected by user {message.from_user.id}.")

    # Log to new user/group log channel
    if NEW_USER_GROUP_LOG_CHANNEL_ID:
        try:
            await client.send_message(
                NEW_USER_GROUP_LOG_CHANNEL_ID,
                f"‚ûï **‡§®‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ:**\n"
                f"‡§®‡§æ‡§Æ: `{chat_info.title}`\n"
                f"ID: `{group_id}`\n"
                f"‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§µ‡§æ‡§≤‡§æ: {message.from_user.mention} (ID: `{message.from_user.id}`)"
            )
        except Exception as e:
            logger.error(f"Error logging manual group add to channel: {e}")


@pyrogram_app.on_message(filters.command("settings") & filters.private)
async def settings_menu_command(client: Client, message: Message):
    logger.info(f"[{message.chat.id}] Received /settings command from user {message.from_user.id} ({message.from_user.first_name}).")
    if not check_cooldown(message.from_user.id, "command"):
        return

    user_id = message.from_user.id
    await show_private_settings_menu(client, message, user_id)


# Custom filter for awaiting input
def awaiting_welcome_message_input_filter(_, message: Message):
    return hasattr(pyrogram_app, 'waiting_for_welcome_message') and \
           pyrogram_app.waiting_for_welcome_message == message.from_user.id and \
           not message.text.startswith('/') and not message.text.startswith('!')

@pyrogram_app.on_message(filters.private & filters.create(awaiting_welcome_message_input_filter))
async def handle_welcome_message_input(client: Client, message: Message):
    logger.info(f"Received potential welcome message input from user {message.from_user.id}. Message: '{message.text}'")

    if message.text == "/cancel":
        if hasattr(pyrogram_app, 'waiting_for_welcome_message') and pyrogram_app.waiting_for_welcome_message == message.from_user.id:
            del pyrogram_app.waiting_for_welcome_message
            if hasattr(pyrogram_app, 'waiting_for_welcome_group'):
                del pyrogram_app.waiting_for_welcome_group
            await message.reply_text("‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
            logger.info(f"Welcome message input cancelled by user {message.from_user.id}.")
        return

    if hasattr(pyrogram_app, 'waiting_for_welcome_message') and pyrogram_app.waiting_for_welcome_message == message.from_user.id:
        group_id = pyrogram_app.waiting_for_welcome_group
        
        if not await is_user_admin_in_chat(client, group_id, message.from_user.id):
            await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§æ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
            logger.warning(f"Unauthorized user {message.from_user.id} tried to set welcome message for group {group_id}.")
            return

        new_welcome_message = message.text
        update_group_settings(group_id, {"welcome_message": new_welcome_message})
        logger.info(f"Welcome message updated for group {group_id} by user {message.from_user.id}.")
        
        await message.reply_text(
            f"‚úÖ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§\n‡§®‡§Ø‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú: `{html.escape(new_welcome_message)}`",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô ‡§µ‡§æ‡§™‡§∏ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏", callback_data=f"select_group_{group_id}")]])
        )
        del pyrogram_app.waiting_for_welcome_message
        del pyrogram_app.waiting_for_welcome_group
    else:
        logger.warning(f"User {message.from_user.id} sent message while not in awaiting input state for welcome message. Ignoring.")


# --- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•à‡§∏‡•á‡§ú ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ (‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç) ---
@pyrogram_app.on_message(filters.text & filters.group & filters.create(is_not_edited_message) & ~filters.via_bot)
async def handle_group_messages(client: Client, message: Message):
    group_id = message.chat.id
    group_data = get_group(group_id)

    if not group_data:
        add_or_update_group(group_id, message.chat.title, OWNER_ID) # Owner_ID as placeholder
        group_data = get_group(group_id) # Fetch newly added data
        logger.info(f"Group {message.chat.title} ({group_id}) auto-added to database on first message.")

    if not group_data.get('bot_enabled', True):
        logger.info(f"[{group_id}] Bot is disabled for this group. Ignoring message from {message.from_user.id}.")
        return

    if message.from_user.is_bot and message.from_user.id != client.me.id:
        logger.info(f"[{group_id}] Ignoring message from other bot {message.from_user.id}.")
        return
    
    if message.from_user.id == client.me.id:
        logger.debug(f"[{group_id}] Ignoring message from self bot {message.from_user.id}.")
        return

    add_or_update_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, message.from_user.is_bot)
    logger.info(f"[{group_id}] User {message.from_user.id} data updated in DB.")

    violation_detected = False
    violation_type = None
    original_content = message.text
    case_name = None

    if group_data.get('filter_abusive', False) and is_abusive(message.text):
        violation_detected = True
        violation_type = "‡§ó‡§æ‡§≤‡•Ä-‡§ó‡§≤‡•å‡§ú"
        case_name = "‡§Ü‡§™‡§§‡•ç‡§§‡§ø‡§ú‡§®‡§ï ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó"
    elif group_data.get('filter_pornographic_text', False) and is_pornographic_text(message.text):
        violation_detected = True
        violation_type = "‡§™‡•â‡§∞‡•ç‡§®‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü"
        case_name = "‡§™‡•â‡§∞‡•ç‡§®‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä"
    elif group_data.get('filter_spam', False) and is_spam(message.text):
        violation_detected = True
        violation_type = "‡§∏‡•ç‡§™‡•à‡§Æ"
        case_name = "‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§∏‡•ç‡§™‡•à‡§Æ"
    elif group_data.get('anti_link_enabled', False) and contains_links(message.text):
        violation_detected = True
        violation_type = "‡§≤‡§ø‡§Ç‡§ï"
        case_name = "‡§Ö‡§®‡§ß‡§ø‡§ï‡•É‡§§ ‡§≤‡§ø‡§Ç‡§ï"
    elif group_data.get('filter_bio_links', False):
        # This filter needs to be async and call database.py functions
        # For now, assuming has_bio_link is in filters.py and uses database.py
        # If get_user_biolink_exception is needed, it must be in database.py
        # For now, I'm removing the biolink exception check as it's not fully implemented in database.py
        # You'll need to add get_user_biolink_exception and set_user_biolink_exception to database.py
        # if you want to use this feature with exceptions.
        if await has_bio_link(client, message.from_user.id):
            # Assuming no exception system for now, or it's handled inside has_bio_link
            violation_detected = True
            violation_type = "‡§¨‡§æ‡§Ø‡•ã_‡§≤‡§ø‡§Ç‡§ï_‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®"
            case_name = "‡§¨‡§æ‡§Ø‡•ã ‡§Æ‡•á‡§Ç ‡§Ö‡§®‡§ß‡§ø‡§ï‡•É‡§§ ‡§≤‡§ø‡§Ç‡§ï"

    elif group_data.get('usernamedel_enabled', False) and contains_usernames(message.text):
        bot_username = client.me.username
        if bot_username and f"@{bot_username.lower()}" in message.text.lower():
            logger.debug(f"[{group_id}] Ignoring bot's own username mention in message from {message.from_user.id}.")
            pass
        else:
            violation_detected = True
            violation_type = "‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ"
            case_name = "‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ ‡§™‡•ç‡§∞‡§ö‡§æ‡§∞"

    if violation_detected:
        logger.info(f"[{group_id}] Violation '{violation_type}' detected from user {message.from_user.id}. Attempting to delete message.")
        try:
            bot_member_in_chat = await client.get_chat_member(group_id, client.me.id)
            if not bot_member_in_chat.can_delete_messages:
                logger.warning(f"[{group_id}] Bot does not have 'can_delete_messages' permission. Cannot delete message.")
                await client.send_message(group_id, "‚ö†Ô∏è **‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä:** ‡§Æ‡•Å‡§ù‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á '‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§π‡§ü‡§æ‡§è‡§Å' (Delete Messages) ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§")
                return

            await message.delete()
            logger.info(f"[{group_id}] Message from {message.from_user.id} deleted successfully.")

            log_data = {
                'username': message.from_user.username or message.from_user.first_name,
                'user_id': message.from_user.id,
                'group_name': message.chat.title,
                'group_id': group_id,
                'violation_type': violation_type,
                'original_content': original_content,
                'case_name': case_name
            }
            # add_violation is not in database.py, assuming it's a separate logging function
            # For now, I'll log to the CASE_LOG_CHANNEL_ID directly
            if CASE_LOG_CHANNEL_ID:
                await client.send_message(
                    CASE_LOG_CHANNEL_ID,
                    f"üö® **‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®:** `{violation_type}`\n"
                    f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{group_id}`)\n"
                    f"‡§Ø‡•Ç‡§ú‡§º‡§∞: [{message.from_user.first_name}](tg://user?id={message.from_user.id}) (ID: `{message.from_user.id}`)\n"
                    f"‡§Æ‡•à‡§∏‡•á‡§ú: `{original_content}`"
                )

            warning_text = (
                f"‚ö†Ô∏è **‡§Ü‡§™‡§§‡•ç‡§§‡§ø‡§ú‡§®‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ** ‚ö†Ô∏è\n\n"
                f"[{message.from_user.first_name}](tg://user?id={message.from_user.id}) ‡§®‡•á ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§\n"
                f"‡§Ø‡§π ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§"
            )

            keyboard = [
                [InlineKeyboardButton("üë§ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§¶‡•á‡§ñ‡•á‡§Ç", url=f"tg://user?id={message.from_user.id}")],
                [InlineKeyboardButton("üî® ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç", callback_data=f"take_action_{message.from_user.id}_{group_id}")],
                [InlineKeyboardButton("üìã ‡§ï‡•á‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç", url=f"https://t.me/c/{str(CASE_LOG_CHANNEL_ID)[4:]}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await client.send_message(
                chat_id=group_id,
                text=warning_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info(f"[{group_id}] Warning message sent to group for user {message.from_user.id}.")

        except Exception as e:
            logger.error(f"[{group_id}] FATAL ERROR: Error handling violation for {message.from_user.id}: {e}", exc_info=True)
    else:
        logger.info(f"[{group_id}] No violation detected for message from user {message.from_user.id}.")


# --- ‡§®‡§è ‡§Æ‡•á‡§Ç‡§¨‡§∞/‡§ó‡•ç‡§∞‡•Å‡§™ ‡§á‡§µ‡•á‡§Ç‡§ü‡•ç‡§∏ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ---
@pyrogram_app.on_message(filters.new_chat_members | filters.left_chat_member & filters.group)
async def handle_new_chat_members(client: Client, message: Message):
    logger.info(f"[{message.chat.id}] New/Left chat members event in chat '{message.chat.title}'.")

    if message.new_chat_members and client.me.id in [member.id for member in message.new_chat_members]:
        logger.info(f"[{message.chat.id}] Bot was added to group.")
        inviter_info = None
        if message.from_user:
            inviter_info = {"id": message.from_user.id, "username": message.from_user.username or message.from_user.first_name}
        
        add_or_update_group(message.chat.id, message.chat.title, inviter_info['id'] if inviter_info else OWNER_ID)
        logger.info(f"[{message.chat.id}] Group {message.chat.id} added/updated in DB (on bot join).")

        thank_you_message = (
            f"ü§ñ **‡§®‡§Æ‡§∏‡•ç‡§§‡•á!** ‡§Æ‡•à‡§Ç `{client.me.first_name}` ‡§π‡•Ç‡§Å, ‡§Ü‡§™‡§ï‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡§æ ‡§®‡§Ø‡§æ ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§¨‡•â‡§ü‡•§\n\n"
            "‡§Æ‡•Å‡§ù‡•á ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•ã ‡§∏‡•ç‡§™‡•à‡§Æ ‡§î‡§∞ ‡§Ö‡§µ‡§æ‡§Ç‡§õ‡§ø‡§§ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Å‡§ó‡§æ‡•§"
            "\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç **‡§è‡§°‡§Æ‡§ø‡§®** ‡§¨‡§®‡§æ ‡§¶‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§†‡•Ä‡§ï ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∏‡§ï‡•Ç‡§Å!"
        )

        thank_you_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}")],
            [InlineKeyboardButton("‚öôÔ∏è ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç (PM)", url=f"https://t.me/{client.me.username}?start=settings")]
        ])

        try:
            await client.send_message(
                chat_id=message.chat.id,
                text=thank_you_message,
                reply_markup=thank_you_keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info(f"[{message.chat.id}] 'Thank you for adding me' message sent to group.")
        except Exception as e:
            logger.error(f"[{message.chat.id}] Error sending 'Thank you for adding me' message: {e}", exc_info=True)

        if NEW_USER_GROUP_LOG_CHANNEL_ID:
            try:
                await client.send_message(
                    NEW_USER_GROUP_LOG_CHANNEL_ID,
                    f"‚ûï **‡§®‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ:**\n"
                    f"‡§®‡§æ‡§Æ: `{message.chat.title}`\n"
                    f"ID: `{message.chat.id}`\n"
                    f"‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§µ‡§æ‡§≤‡§æ: {message.from_user.mention if message.from_user else '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'}"
                )
            except Exception as e:
                logger.error(f"Error logging new group to channel: {e}")
        return

    group_settings = get_group(message.chat.id)
    if not group_settings or not group_settings.get('bot_enabled', True):
        logger.info(f"[{message.chat.id}] Bot disabled or no settings for this group. Ignoring new/left member event (after bot join).")
        return

    if message.new_chat_members:
        for member in message.new_chat_members:
            if member.is_bot and member.id != client.me.id:
                logger.info(f"[{message.chat.id}] New member is a bot: {member.id} ({member.first_name}). Attempting to kick.")
                try:
                    bot_member_in_chat = await client.get_chat_member(message.chat.id, client.me.id)
                    if not bot_member_in_chat.can_restrict_members:
                        logger.warning(f"[{message.chat.id}] Bot does not have 'can_restrict_members' permission. Cannot kick bot {member.id}.")
                        await client.send_message(message.chat.id, f"‚ö†Ô∏è **‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä:** ‡§Æ‡•à‡§Ç ‡§®‡§è ‡§¨‡•â‡§ü [{member.first_name}](tg://user?id={member.id}) ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§ï‡§§‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ '‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç' (Restrict Members) ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
                        continue
                        
                    await client.ban_chat_member(message.chat.id, member.id)
                    await client.unban_chat_member(message.chat.id, member.id)
                    await client.send_message(
                        message.chat.id,
                        f"ü§ñ ‡§®‡§Ø‡§æ ‡§¨‡•â‡§ü [{member.first_name}](tg://user?id={member.id}) ‡§™‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§î‡§∞ ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§"
                    )
                    logger.info(f"[{message.chat.id}] Bot {member.id} kicked successfully and message sent.")
                except Exception as e:
                    logger.error(f"[{message.chat.id}] Error kicking bot {member.id}: {e}", exc_info=True)
            elif not member.is_bot:
                logger.info(f"[{message.chat.id}] New human user: {member.id} ({member.first_name}).")
                add_or_update_user(member.id, member.username, member.first_name, member.last_name, False)
                
                if NEW_USER_GROUP_LOG_CHANNEL_ID:
                    try:
                        await client.send_message(
                            NEW_USER_GROUP_LOG_CHANNEL_ID,
                            f"‚ûï **‡§®‡§Ø‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø:**\n"
                            f"‡§Ø‡•Ç‡§ú‡§º‡§∞: [{member.first_name}](tg://user?id={member.id}) (ID: `{member.id}`)\n"
                            f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)"
                        )
                    except Exception as e:
                        logger.error(f"Error logging new user to channel: {e}")

                welcome_msg = group_settings.get('welcome_message', WELCOME_MESSAGE_DEFAULT)
                formatted_welcome = welcome_msg.replace("{username}", member.mention).replace("{groupname}", html.escape(message.chat.title))

                welcome_keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì¢ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤", url=f"https://t.me/{UPDATE_CHANNEL_USERNAME}")]
                ])

                try:
                    await client.send_message(message.chat.id, formatted_welcome, reply_markup=welcome_keyboard, parse_mode=ParseMode.MARKDOWN)
                    logger.info(f"[{message.chat.id}] Welcome message sent to new user {member.id}.")
                except Exception as e:
                    logger.error(f"[{message.chat.id}] Error sending welcome message to {member.id}: {e}", exc_info=True)

    if message.left_chat_member:
        member = message.left_chat_member
        if member.id == client.me.id:
            delete_group(message.chat.id)
            logger.info(f"Bot was removed from group {message.chat.title} ({message.chat.id}). Group data deleted.")
            if CASE_LOG_CHANNEL_ID:
                try:
                    await client.send_message(
                        CASE_LOG_CHANNEL_ID,
                        f"‚ûñ **‡§¨‡•â‡§ü ‡§π‡§ü‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ:**\n"
                        f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)\n"
                        f"‡§π‡§ü‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ: {message.from_user.mention if message.from_user else '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'}"
                    )
                except Exception as e:
                    logger.error(f"Error logging bot removed event: {e}")
        elif not member.is_bot:
            if NEW_USER_GROUP_LOG_CHANNEL_ID:
                try:
                    await client.send_message(
                        NEW_USER_GROUP_LOG_CHANNEL_ID,
                        f"‚ûñ **‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§ö‡§≤‡§æ ‡§ó‡§Ø‡§æ:**\n"
                        f"‡§Ø‡•Ç‡§ú‡§º‡§∞: [{member.first_name}](tg://user?id={member.id}) (ID: `{member.id}`)\n"
                        f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)"
                    )
                except Exception as e:
                    logger.error(f"Error logging left user to channel: {e}")


# --- ‡§¨‡•â‡§ü ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ---
@pyrogram_app.on_message(filters.command("broadcast") & filters.user(OWNER_ID) & filters.private)
async def broadcast_command(client: Client, message: Message):
    logger.info(f"Owner {message.from_user.id} received /broadcast command.")
    if not check_cooldown(message.from_user.id, "command"):
        return

    if not message.text or len(message.command) < 2:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§")
        logger.warning(f"Owner {message.from_user.id} did not provide message for broadcast.")
        return

    message_to_broadcast = message.text.split(None, 1)[1]
    all_groups = get_all_groups()
    logger.info(f"Attempting to broadcast message to {len(all_groups)} groups.")

    sent_count = 0
    failed_count = 0
    failed_groups = []

    for group in all_groups:
        try:
            chat_member = await client.get_chat_member(group["_id"], client.me.id)
            if chat_member.status != ChatMemberStatus.LEFT:
                await client.send_message(chat_id=group["_id"], text=message_to_broadcast)
                sent_count += 1
                logger.info(f"Broadcasted to group {group['_id']} ({group.get('title', 'N/A')}).")
                await asyncio.sleep(0.1)
            else:
                logger.warning(f"Bot is not a member of group {group['_id']} ({group.get('title', 'N/A')}). Skipping broadcast.")
                failed_count += 1
                failed_groups.append(f"{group.get('title', 'N/A')} ({group['_id']}) - Bot not member")
        except Exception as e:
            logger.error(f"Error broadcasting to group {group['_id']} ({group.get('title', 'N/A')}): {e}", exc_info=True)
            failed_count += 1
            failed_groups.append(f"{group.get('title', 'N/A')} ({group['_id']}) - Error: {e}")

    summary_message = f"‡§∏‡§Ç‡§¶‡•á‡§∂ {sent_count} ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ‡•§"
    if failed_count > 0:
        summary_message += f"\n\n**{failed_count} ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤:**\n"
        summary_message += "\n".join(failed_groups[:10])
        if len(failed_groups) > 10:
            summary_message += f"\n...‡§î‡§∞ {len(failed_groups) - 10} ‡§Ö‡§®‡•ç‡§Ø‡•§"
    
    await message.reply_text(summary_message)
    logger.info(f"Broadcast completed. Sent to {sent_count} groups, failed for {failed_count}.")

@pyrogram_app.on_message(filters.command("stats") & filters.user(OWNER_ID) & filters.private)
async def stats_command(client: Client, message: Message):
    logger.info(f"Owner {message.from_user.id} received /stats command.")
    if not check_cooldown(message.from_user.id, "command"):
        return

    group_count = len(get_all_groups())
    # You might need to add get_total_users() and get_total_violations() to database.py
    # For now, I'll use placeholders if they are not yet implemented.
    # If you have them, ensure they are imported from database.py
    total_users_count = 0 # Placeholder
    total_violations_count = 0 # Placeholder
    
    # Example of how to get actual counts if implemented in database.py
    # from database import get_total_users, get_total_violations
    # total_users_count = get_total_users()
    # total_violations_count = get_total_violations()


    stats_message = (
        f"üìä **‡§¨‡•â‡§ü ‡§Ü‡§Ç‡§ï‡§°‡§º‡•á** üìä\n\n"
        f"**‡§ú‡•Å‡§°‡§º‡•á ‡§π‡•Å‡§è ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏:** `{group_count}`\n"
        f"**‡§ï‡•Å‡§≤ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§ø‡§è ‡§ó‡§è ‡§Ø‡•Ç‡§ú‡§º‡§∞‡•ç‡§∏:** `{total_users_count}`\n"
        f"**‡§ï‡•Å‡§≤ ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®:** `{total_violations_count}`\n\n"
        f"‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•ã‡§°: [GitHub]({REPO_LINK})\n"
        f"‡§Ö‡§™‡§°‡•á‡§ü ‡§ö‡•à‡§®‡§≤: @{UPDATE_CHANNEL_USERNAME}\n"
        f"‡§Æ‡§æ‡§≤‡§ø‡§ï: @{ASBHAI_USERNAME}"
    )
    await message.reply_text(stats_message, parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Stats sent to owner {message.from_user.id}. Groups: {group_count}, Users: {total_users_count}, Violations: {total_violations_count}.")


# --- Admin Commands (Group specific) ---

@pyrogram_app.on_message(filters.command("ban") & filters.group)
async def ban_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•Å‡§ù‡•á ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    
    target_user_id = None
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
    elif len(message.command) > 1:
        try:
            target_user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    if target_user_id == client.me.id:
        await message.reply_text("‡§Æ‡•à‡§Ç ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§¨‡•à‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ‡•§")
        return
    if target_user_id == message.from_user.id:
        await message.reply_text("‡§Ü‡§™ ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§¨‡•à‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§")
        return
    if target_user_id == OWNER_ID:
        await message.reply_text("‡§Ü‡§™ ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡•ã ‡§¨‡•à‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§")
        return

    try:
        await client.ban_chat_member(message.chat.id, target_user_id)
        user_info = await client.get_users(target_user_id)
        await message.reply_text(f"‚úÖ {user_info.mention} ‡§ï‡•ã ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§¨‡•à‡§® ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
        logger.info(f"User {target_user_id} banned in group {message.chat.id} by {message.from_user.id}.")
        
        if CASE_LOG_CHANNEL_ID:
            await client.send_message(
                CASE_LOG_CHANNEL_ID,
                f"üö´ **‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§¨‡•à‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ:**\n"
                f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)\n"
                f"‡§¨‡•à‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞: [{user_info.first_name}](tg://user?id={user_info.id}) (ID: `{user_info.id}`)\n"
                f"‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§°‡§Æ‡§ø‡§®: {message.from_user.mention} (ID: `{message.from_user.id}`)"
            )
    except Exception as e:
        logger.error(f"Error banning user {target_user_id} in {message.chat.id}: {e}")
        await message.reply_text(f"‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à: `{e}`")


@pyrogram_app.on_message(filters.command("unban") & filters.group)
async def unban_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•Å‡§ù‡•á ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    
    target_user_id = None
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
    elif len(message.command) > 1:
        try:
            target_user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    try:
        await client.unban_chat_member(message.chat.id, target_user_id)
        user_info = await client.get_users(target_user_id)
        await message.reply_text(f"‚úÖ {user_info.mention} ‡§ï‡•ã ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
        logger.info(f"User {target_user_id} unbanned in group {message.chat.id} by {message.from_user.id}.")
        
        if CASE_LOG_CHANNEL_ID:
            await client.send_message(
                CASE_LOG_CHANNEL_ID,
                f"üîì **‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ:**\n"
                f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)\n"
                f"‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞: [{user_info.first_name}](tg://user?id={user_info.id}) (ID: `{user_info.id}`)\n"
                f"‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§°‡§Æ‡§ø‡§®: {message.from_user.mention} (ID: `{message.from_user.id}`)"
            )
    except Exception as e:
        logger.error(f"Error unbanning user {target_user_id} in {message.chat.id}: {e}")
        await message.reply_text(f"‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Ö‡§®‡§¨‡•à‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à: `{e}`")


@pyrogram_app.on_message(filters.command("kick") & filters.group)
async def kick_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•Å‡§ù‡•á ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ï‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return

    target_user_id = None
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
    elif len(message.command) > 1:
        try:
            target_user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§ï‡§ø‡§ï ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§ï‡§ø‡§ï ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    if target_user_id == client.me.id:
        await message.reply_text("‡§Æ‡•à‡§Ç ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§ï‡§ø‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ‡•§")
        return
    if target_user_id == message.from_user.id:
        await message.reply_text("‡§Ü‡§™ ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§ï‡§ø‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§")
        return
    if target_user_id == OWNER_ID:
        await message.reply_text("‡§Ü‡§™ ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡•ã ‡§ï‡§ø‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§")
        return
    
    try:
        await client.restrict_chat_member(message.chat.id, target_user_id, 
                                          ChatPermissions(can_send_messages=False), 
                                          datetime.now() + timedelta(minutes=1))
        await client.unban_chat_member(message.chat.id, target_user_id)
        user_info = await client.get_users(target_user_id)
        await message.reply_text(f"‚úÖ {user_info.mention} ‡§ï‡•ã ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§ï‡§ø‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
        logger.info(f"User {target_user_id} kicked from group {message.chat.id} by {message.from_user.id}.")

        if CASE_LOG_CHANNEL_ID:
            await client.send_message(
                CASE_LOG_CHANNEL_ID,
                f"üëü **‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡§ø‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ:**\n"
                f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)\n"
                f"‡§ï‡§ø‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞: [{user_info.first_name}](tg://user?id={user_info.id}) (ID: `{user_info.id}`)\n"
                f"‡§ï‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§°‡§Æ‡§ø‡§®: {message.from_user.mention} (ID: `{message.from_user.id}`)"
            )
    except Exception as e:
        logger.error(f"Error kicking user {target_user_id} in {message.chat.id}: {e}")
        await message.reply_text(f"‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ï‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à: `{e}`")


@pyrogram_app.on_message(filters.command("mute") & filters.group)
async def mute_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•Å‡§ù‡•á ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return

    target_user_id = None
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
    elif len(message.command) > 1:
        try:
            target_user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    if target_user_id == client.me.id:
        await message.reply_text("‡§Æ‡•à‡§Ç ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ‡•§")
        return
    if target_user_id == message.from_user.id:
        await message.reply_text("‡§Ü‡§™ ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§")
        return
    if target_user_id == OWNER_ID:
        await message.reply_text("‡§Ü‡§™ ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡•ã ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§")
        return

    duration = None
    if len(message.command) > 2:
        try:
            duration_value = int(message.command[2])
            duration_unit = message.command[3].lower() if len(message.command) > 3 else "m"
            if duration_unit.startswith("h"):
                duration = timedelta(hours=duration_value)
            elif duration_unit.startswith("d"):
                duration = timedelta(days=duration_value)
            else: # default to minutes
                duration = timedelta(minutes=duration_value)
        except ValueError:
            await message.reply_text("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ö‡§µ‡§ß‡§ø‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/mute 123456789 30m` (30 ‡§Æ‡§ø‡§®‡§ü), `/mute 1h` (1 ‡§ò‡§Ç‡§ü‡§æ), `/mute 7d` (7 ‡§¶‡§ø‡§®)")
            return

    try:
        await client.restrict_chat_member(message.chat.id, target_user_id, 
                                          ChatPermissions(can_send_messages=False), 
                                          (datetime.now() + duration) if duration else None)
        user_info = await client.get_users(target_user_id)
        if duration:
            await message.reply_text(f"‚úÖ {user_info.mention} ‡§ï‡•ã {duration.total_seconds() // 60} ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
            logger.info(f"User {target_user_id} muted for {duration} in group {message.chat.id} by {message.from_user.id}.")
        else:
            await message.reply_text(f"‚úÖ {user_info.mention} ‡§ï‡•ã ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
            logger.info(f"User {target_user_id} muted indefinitely in group {message.chat.id} by {message.from_user.id}.")

        if CASE_LOG_CHANNEL_ID:
            duration_str = f" for {duration}" if duration else " indefinitely"
            await client.send_message(
                CASE_LOG_CHANNEL_ID,
                f"üîá **‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ:**\n"
                f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)\n"
                f"‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞: [{user_info.first_name}](tg://user?id={user_info.id}) (ID: `{user_info.id}`)\n"
                f"‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§°‡§Æ‡§ø‡§®: {message.from_user.mention} (ID: `{message.from_user.id}`)\n"
                f"‡§Ö‡§µ‡§ß‡§ø: {duration_str}"
            )
    except Exception as e:
        logger.error(f"Error muting user {target_user_id} in {message.chat.id}: {e}")
        await message.reply_text(f"‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à: `{e}`")


@pyrogram_app.on_message(filters.command("unmute") & filters.group)
async def unmute_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•Å‡§ù‡•á ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return

    target_user_id = None
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
    elif len(message.command) > 1:
        try:
            target_user_id = int(message.command[1])
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    try:
        await client.restrict_chat_member(message.chat.id, target_user_id, ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
            can_send_polls=True,
            can_change_info=False,
            can_invite_users=True,
            can_pin_messages=False,
            can_manage_topics=False
        ))
        user_info = await client.get_users(target_user_id)
        await message.reply_text(f"‚úÖ {user_info.mention} ‡§ï‡•ã ‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§", parse_mode=ParseMode.MARKDOWN)
        logger.info(f"User {target_user_id} unmuted in group {message.chat.id} by {message.from_user.id}.")

        if CASE_LOG_CHANNEL_ID:
            await client.send_message(
                CASE_LOG_CHANNEL_ID,
                f"üîä **‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ:**\n"
                f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)\n"
                f"‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞: [{user_info.first_name}](tg://user?id={user_info.id}) (ID: `{user_info.id}`)\n"
                f"‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§°‡§Æ‡§ø‡§®: {message.from_user.mention} (ID: `{message.from_user.id}`)"
            )
    except Exception as e:
        logger.error(f"Error unmuting user {target_user_id} in {message.chat.id}: {e}")
        await message.reply_text(f"‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Ö‡§®‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à: `{e}`")


@pyrogram_app.on_message(filters.command("warn") & filters.group)
async def warn_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•Å‡§ù‡•á ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return

    target_user = None
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(message.command) > 1:
        try:
            target_user = await client.get_users(int(message.command[1]))
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    if not target_user:
        await message.reply_text("‡§ï‡•ã‡§à ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return
    
    if target_user.id == client.me.id:
        await message.reply_text("‡§Æ‡•à‡§Ç ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ‡•§")
        return
    if target_user.id == message.from_user.id:
        await message.reply_text("‡§Ü‡§™ ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§∏‡§ï‡§§‡•á‡•§")
        return
    if target_user.id == OWNER_ID:
        await message.reply_text("‡§Ü‡§™ ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡•ã ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§∏‡§ï‡§§‡•á‡•§")
        return

    current_warns = add_warn(message.chat.id, target_user.id)
    group_data = get_group(message.chat.id)
    warn_limit = group_data.get("warn_limit", 3) # Get warn limit from group settings

    warn_message = f"‚ö†Ô∏è {target_user.mention} ‡§ï‡•ã {current_warns}/{warn_limit} ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à‡•§"
    
    if current_warns >= warn_limit:
        await client.ban_chat_member(message.chat.id, target_user.id)
        warn_message += f"\n{target_user.mention} ‡§ï‡•ã {warn_limit} ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§¨‡•à‡§® ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§"
        delete_warns(message.chat.id, target_user.id)
        logger.info(f"User {target_user.id} banned in group {message.chat.id} after reaching warn limit.")

        if CASE_LOG_CHANNEL_ID:
            await client.send_message(
                CASE_LOG_CHANNEL_ID,
                f"‚õî **‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§¨‡•à‡§®:**\n"
                f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)\n"
                f"‡§Ø‡•Ç‡§ú‡§º‡§∞: [{target_user.first_name}](tg://user?id={target_user.id}) (ID: `{target_user.id}`)\n"
                f"‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§°‡§Æ‡§ø‡§®: {message.from_user.mention} (ID: `{message.from_user.id}`)\n"
                f"‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ: `{current_warns}`"
            )

    await message.reply_text(warn_message, parse_mode=ParseMode.MARKDOWN)
    logger.info(f"User {target_user.id} warned in group {message.chat.id} by {message.from_user.id}. Total warns: {current_warns}.")


@pyrogram_app.on_message(filters.command("warnings") & filters.group)
async def warnings_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    
    target_user = None
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(message.command) > 1:
        try:
            target_user = await client.get_users(int(message.command[1]))
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§Ü‡§™ ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§Ü‡§™ ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    if not target_user:
        await message.reply_text("‡§ï‡•ã‡§à ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return

    current_warns = get_warns(message.chat.id, target_user.id)
    await message.reply_text(f"{target_user.mention} ‡§ï‡•á ‡§™‡§æ‡§∏ {current_warns} ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§π‡•à‡§Ç‡•§", parse_mode=ParseMode.MARKDOWN)


@pyrogram_app.on_message(filters.command("resetwarns") & filters.group)
async def resetwarns_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    
    target_user = None
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(message.command) > 1:
        try:
            target_user = await client.get_users(int(message.command[1]))
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§Ü‡§™ ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§Ü‡§™ ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    if not target_user:
        await message.reply_text("‡§ï‡•ã‡§à ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return

    delete_warns(message.chat.id, target_user.id)
    await message.reply_text(f"‚úÖ {target_user.mention} ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡§Ç‡•§", parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Warns for user {target_user.id} in group {message.chat.id} reset by {message.from_user.id}.")

    if CASE_LOG_CHANNEL_ID:
        await client.send_message(
            CASE_LOG_CHANNEL_ID,
            f"üîÑ **‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§∞‡•Ä‡§∏‡•á‡§ü:**\n"
            f"‡§ó‡•ç‡§∞‡•Å‡§™: `{message.chat.title}` (ID: `{message.chat.id}`)\n"
            f"‡§Ø‡•Ç‡§ú‡§º‡§∞: [{target_user.first_name}](tg://user?id={target_user.id}) (ID: `{target_user.id}`)\n"
            f"‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§°‡§Æ‡§ø‡§®: {message.from_user.mention} (ID: `{message.from_user.id}`)"
        )


@pyrogram_app.on_message(filters.command("info") & filters.group)
async def info_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    
    target_user = None
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    elif len(message.command) > 1:
        try:
            target_user = await client.get_users(int(message.command[1]))
        except ValueError:
            await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Ü‡§™ ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
            return
    else:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ID ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Ü‡§™ ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        return

    if not target_user:
        await message.reply_text("‡§ï‡•ã‡§à ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return

    user_data = get_user(target_user.id)
    warn_count = get_warns(message.chat.id, target_user.id)

    info_text = (
        f"üë§ **‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:**\n"
        f"  ‚Ä¢ ID: `{target_user.id}`\n"
        f"  ‚Ä¢ ‡§®‡§æ‡§Æ: `{target_user.first_name}`"
    )
    if target_user.last_name:
        info_text += f" `{target_user.last_name}`"
    if target_user.username:
        info_text += f"\n  ‚Ä¢ ‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ: @{target_user.username}"
    info_text += f"\n  ‚Ä¢ ‡§¨‡•â‡§ü: {'‚úÖ ‡§π‡§æ‡§Å' if target_user.is_bot else '‚ùå ‡§®‡§π‡•Ä‡§Ç'}"
    info_text += f"\n  ‚Ä¢ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Å (‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç): `{warn_count}`"

    if user_data:
        info_text += f"\n  ‚Ä¢ ‡§¨‡•â‡§ü ‡§∏‡•á ‡§Ü‡§ñ‡§ø‡§∞‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§: `{user_data.get('last_seen', 'N/A')}`"
        # Add more user data if stored

    await message.reply_text(info_text, parse_mode=ParseMode.MARKDOWN)


@pyrogram_app.on_message(filters.command("setwelcome") & filters.group)
async def set_welcome_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•Å‡§ù‡•á ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return

    new_welcome_message = message.text.split(None, 1)[1] if len(message.command) > 1 else None

    if not new_welcome_message:
        await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/setwelcome ‡§µ‡•á‡§≤‡§ï‡§Æ {username}!`")
        return
    
    update_group_settings(message.chat.id, {"welcome_message": new_welcome_message})
    await message.reply_text(
        f"‚úÖ ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§\n‡§®‡§Ø‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú: `{html.escape(new_welcome_message)}`\n\n"
        "‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø ‡§Ø‡§π ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§µ‡•á‡§≤‡§ï‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç, `/settings` ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§"
    )
    logger.info(f"Group {message.chat.id}: Custom welcome message set by {message.from_user.id}.")


@pyrogram_app.on_message(filters.command("clean") & filters.group)
async def clean_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•Å‡§ù‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return

    count = 1
    if len(message.command) > 1:
        try:
            count = int(message.command[1])
            if count <= 0 or count > 100:
                await message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ 1 ‡§∏‡•á 100 ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§")
                return
        except ValueError:
            await message.reply_text("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡•§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/clean 10`")
            return

    try:
        # Delete the command message itself + 'count' number of messages before it
        await client.delete_messages(
            chat_id=message.chat.id,
            message_ids=[message.id] + list(range(message.id - count, message.id))
        )
        logger.info(f"Deleted {count} messages in group {message.chat.id} by {message.from_user.id}.")
    except Exception as e:
        logger.error(f"Error deleting messages in group {message.chat.id}: {e}")
        await message.reply_text(f"‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à: `{e}`")


@pyrogram_app.on_message(filters.command("settings") & filters.group)
async def group_settings_command(client: Client, message: Message):
    if not await is_user_admin_in_chat(client, message.chat.id, message.from_user.id):
        await message.reply_text("‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§")
        return
    if not await is_bot_admin_in_chat(client, message.chat.id):
        await message.reply_text("‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§")
        return
    
    await show_group_settings(client, message, message.chat.id)


# --- Run the Bot ---
if __name__ == "__main__":
    logger.info("Bot starting...")
    pyrogram_app.run()
    logger.info("Bot stopped.")
